// Code generated by protoc-gen-gogo.
// source: protos.proto
// DO NOT EDIT!

/*
	Package msgs is a generated protocol buffer package.

	It is generated from these files:
		protos.proto
		share.proto

	It has these top-level messages:
		CheckLogin
		HeartBeatMsg
		C2S_ShopBuyMsg
		S2C_ShopBuyMsg
		FrameMsg
		FrameMsgJson
		FrameMsgReq
		FrameMsgRep
		UnicastFrameMsg
		MulticastFrameMsg
		BroadcastFrameMsg
		BroadcastFrameMsgJson
		AddAgentToParent
		RemoveAgentFromParent
		NewChild
		NewChildResult
		Connect
		Connected
		SpawnAgent
		ServiceValue
		AddService
		AddServiceRep
		SendOK
		RemoveService
		ApplyService
		ApplyServiceResult
		GetTypeServices
		GetTypeServicesResult
		UploadService
		UserLogin
		GetSessionInfo
		GetSessionInfoByName
		GetSessionInfoResult
		ClientDisconnect
		ReceviceClientMsg
		UserLeave
		Kick
		ServerCheckLogin
		UserBindServer
		UserBaseInfo
		CheckLoginResult
		CreatePlayer
		CreatePlayerResult
		PlayerOutline
		Tick
		TimeFlush
		BattleRoomInfo
		GetLobbyInfo
		LobbyQueueData
		BattleServerData
		GetLobbyInfoResult
		GetBattleServer
		GetBattleServerResult
		JoinBattleQueue
		JoinBattleQueueResult
		LeaveBattleQueue
		MatchBattle
		CreateBattlePlayer
		CreateBattle
		CreateBattleRep
		JoinBattle
		AttachBattle
		DetachBattle
		RecoverBattle
		RecoverBattleRep
*/
package msgs

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import actor "github.com/AsynkronIT/protoactor-go/actor"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// =========shop=============
type ShopMsgType int32

const (
	C2S_ShopBuy  ShopMsgType = 0
	S2C_ShopBuy  ShopMsgType = 1
	C2S_ShopSell ShopMsgType = 2
	S2C_ShopSell ShopMsgType = 3
)

var ShopMsgType_name = map[int32]string{
	0: "C2S_ShopBuy",
	1: "S2C_ShopBuy",
	2: "C2S_ShopSell",
	3: "S2C_ShopSell",
}
var ShopMsgType_value = map[string]int32{
	"C2S_ShopBuy":  0,
	"S2C_ShopBuy":  1,
	"C2S_ShopSell": 2,
	"S2C_ShopSell": 3,
}

func (ShopMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorProtos, []int{0} }

// =========bag==============
type BagMsgType int32

const (
	S2C_Bag BagMsgType = 0
)

var BagMsgType_name = map[int32]string{
	0: "S2C_Bag",
}
var BagMsgType_value = map[string]int32{
	"S2C_Bag": 0,
}

func (BagMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorProtos, []int{1} }

// 服务器状态
type ServiceState int32

const (
	ServiceStateFree ServiceState = 0
	ServiceFull      ServiceState = 1
	ServiceStop      ServiceState = 2
)

var ServiceState_name = map[int32]string{
	0: "ServiceStateFree",
	1: "ServiceFull",
	2: "ServiceStop",
}
var ServiceState_value = map[string]int32{
	"ServiceStateFree": 0,
	"ServiceFull":      1,
	"ServiceStop":      2,
}

func (ServiceState) EnumDescriptor() ([]byte, []int) { return fileDescriptorProtos, []int{2} }

// ==========Login===========
// 登入游戏验证
type CheckLogin struct {
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CheckLogin) Reset()                    { *m = CheckLogin{} }
func (*CheckLogin) ProtoMessage()               {}
func (*CheckLogin) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{0} }

func (m *CheckLogin) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CheckLogin) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type HeartBeatMsg struct {
}

func (m *HeartBeatMsg) Reset()                    { *m = HeartBeatMsg{} }
func (*HeartBeatMsg) ProtoMessage()               {}
func (*HeartBeatMsg) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{1} }

type C2S_ShopBuyMsg struct {
	ItemId uint32 `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (m *C2S_ShopBuyMsg) Reset()                    { *m = C2S_ShopBuyMsg{} }
func (*C2S_ShopBuyMsg) ProtoMessage()               {}
func (*C2S_ShopBuyMsg) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{2} }

func (m *C2S_ShopBuyMsg) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type S2C_ShopBuyMsg struct {
	ItemId uint32      `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
	Result GAErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=msgs.GAErrorCode" json:"result,omitempty"`
}

func (m *S2C_ShopBuyMsg) Reset()                    { *m = S2C_ShopBuyMsg{} }
func (*S2C_ShopBuyMsg) ProtoMessage()               {}
func (*S2C_ShopBuyMsg) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{3} }

func (m *S2C_ShopBuyMsg) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *S2C_ShopBuyMsg) GetResult() GAErrorCode {
	if m != nil {
		return m.Result
	}
	return OK
}

// 客户端消息转rpc通用消息
type FrameMsg struct {
	Channel ChannelType `protobuf:"varint,1,opt,name=channel,proto3,enum=msgs.ChannelType" json:"channel,omitempty"`
	MsgId   uint32      `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`
	RawData []byte      `protobuf:"bytes,3,opt,name=rawData,proto3" json:"rawData,omitempty"`
	Uid     uint64      `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *FrameMsg) Reset()                    { *m = FrameMsg{} }
func (*FrameMsg) ProtoMessage()               {}
func (*FrameMsg) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{4} }

func (m *FrameMsg) GetChannel() ChannelType {
	if m != nil {
		return m.Channel
	}
	return Login
}

func (m *FrameMsg) GetMsgId() uint32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *FrameMsg) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (m *FrameMsg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type FrameMsgJson struct {
	Channel ChannelType `protobuf:"varint,1,opt,name=channel,proto3,enum=msgs.ChannelType" json:"channel,omitempty"`
	MsgId   string      `protobuf:"bytes,2,opt,name=msgId,proto3" json:"msgId,omitempty"`
	RawData []byte      `protobuf:"bytes,3,opt,name=rawData,proto3" json:"rawData,omitempty"`
	Uid     uint64      `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *FrameMsgJson) Reset()                    { *m = FrameMsgJson{} }
func (*FrameMsgJson) ProtoMessage()               {}
func (*FrameMsgJson) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{5} }

func (m *FrameMsgJson) GetChannel() ChannelType {
	if m != nil {
		return m.Channel
	}
	return Login
}

func (m *FrameMsgJson) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *FrameMsgJson) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (m *FrameMsgJson) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type FrameMsgReq struct {
	Frame *FrameMsg `protobuf:"bytes,1,opt,name=frame" json:"frame,omitempty"`
	Cno   uint32    `protobuf:"varint,2,opt,name=cno,proto3" json:"cno,omitempty"`
}

func (m *FrameMsgReq) Reset()                    { *m = FrameMsgReq{} }
func (*FrameMsgReq) ProtoMessage()               {}
func (*FrameMsgReq) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{6} }

func (m *FrameMsgReq) GetFrame() *FrameMsg {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (m *FrameMsgReq) GetCno() uint32 {
	if m != nil {
		return m.Cno
	}
	return 0
}

type FrameMsgRep struct {
	// uint32 msgId  = 1;
	// uint32 cno  = 2;
	ErrCode GAErrorCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=msgs.GAErrorCode" json:"errCode,omitempty"`
}

func (m *FrameMsgRep) Reset()                    { *m = FrameMsgRep{} }
func (*FrameMsgRep) ProtoMessage()               {}
func (*FrameMsgRep) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{7} }

func (m *FrameMsgRep) GetErrCode() GAErrorCode {
	if m != nil {
		return m.ErrCode
	}
	return OK
}

// gate发送协议
// 单
type UnicastFrameMsg struct {
	FrameMsg *FrameMsg `protobuf:"bytes,1,opt,name=frameMsg" json:"frameMsg,omitempty"`
	Target   uint64    `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *UnicastFrameMsg) Reset()                    { *m = UnicastFrameMsg{} }
func (*UnicastFrameMsg) ProtoMessage()               {}
func (*UnicastFrameMsg) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{8} }

func (m *UnicastFrameMsg) GetFrameMsg() *FrameMsg {
	if m != nil {
		return m.FrameMsg
	}
	return nil
}

func (m *UnicastFrameMsg) GetTarget() uint64 {
	if m != nil {
		return m.Target
	}
	return 0
}

// 组
type MulticastFrameMsg struct {
	FrameMsg *FrameMsg `protobuf:"bytes,1,opt,name=frameMsg" json:"frameMsg,omitempty"`
	Targets  []uint64  `protobuf:"varint,2,rep,packed,name=targets" json:"targets,omitempty"`
}

func (m *MulticastFrameMsg) Reset()                    { *m = MulticastFrameMsg{} }
func (*MulticastFrameMsg) ProtoMessage()               {}
func (*MulticastFrameMsg) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{9} }

func (m *MulticastFrameMsg) GetFrameMsg() *FrameMsg {
	if m != nil {
		return m.FrameMsg
	}
	return nil
}

func (m *MulticastFrameMsg) GetTargets() []uint64 {
	if m != nil {
		return m.Targets
	}
	return nil
}

// 广播
type BroadcastFrameMsg struct {
	FrameMsg *FrameMsg `protobuf:"bytes,1,opt,name=frameMsg" json:"frameMsg,omitempty"`
}

func (m *BroadcastFrameMsg) Reset()                    { *m = BroadcastFrameMsg{} }
func (*BroadcastFrameMsg) ProtoMessage()               {}
func (*BroadcastFrameMsg) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{10} }

func (m *BroadcastFrameMsg) GetFrameMsg() *FrameMsg {
	if m != nil {
		return m.FrameMsg
	}
	return nil
}

type BroadcastFrameMsgJson struct {
	FrameMsg *FrameMsgJson `protobuf:"bytes,1,opt,name=frameMsg" json:"frameMsg,omitempty"`
}

func (m *BroadcastFrameMsgJson) Reset()                    { *m = BroadcastFrameMsgJson{} }
func (*BroadcastFrameMsgJson) ProtoMessage()               {}
func (*BroadcastFrameMsgJson) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{11} }

func (m *BroadcastFrameMsgJson) GetFrameMsg() *FrameMsgJson {
	if m != nil {
		return m.FrameMsg
	}
	return nil
}

// 加入到管理
type AddAgentToParent struct {
	Uid    uint64     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Sender *actor.PID `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
}

func (m *AddAgentToParent) Reset()                    { *m = AddAgentToParent{} }
func (*AddAgentToParent) ProtoMessage()               {}
func (*AddAgentToParent) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{12} }

func (m *AddAgentToParent) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AddAgentToParent) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

// 移除管理
type RemoveAgentFromParent struct {
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *RemoveAgentFromParent) Reset()                    { *m = RemoveAgentFromParent{} }
func (*RemoveAgentFromParent) ProtoMessage()               {}
func (*RemoveAgentFromParent) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{13} }

func (m *RemoveAgentFromParent) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type NewChild struct {
}

func (m *NewChild) Reset()                    { *m = NewChild{} }
func (*NewChild) ProtoMessage()               {}
func (*NewChild) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{14} }

type NewChildResult struct {
	Pid *actor.PID `protobuf:"bytes,1,opt,name=pid" json:"pid,omitempty"`
}

func (m *NewChildResult) Reset()                    { *m = NewChildResult{} }
func (*NewChildResult) ProtoMessage()               {}
func (*NewChildResult) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{15} }

func (m *NewChildResult) GetPid() *actor.PID {
	if m != nil {
		return m.Pid
	}
	return nil
}

type Connect struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender,json=sender" json:"Sender,omitempty"`
}

func (m *Connect) Reset()                    { *m = Connect{} }
func (*Connect) ProtoMessage()               {}
func (*Connect) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{16} }

func (m *Connect) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

type Connected struct {
	Message string `protobuf:"bytes,1,opt,name=Message,json=message,proto3" json:"Message,omitempty"`
}

func (m *Connected) Reset()                    { *m = Connected{} }
func (*Connected) ProtoMessage()               {}
func (*Connected) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{17} }

func (m *Connected) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SpawnAgent struct {
}

func (m *SpawnAgent) Reset()                    { *m = SpawnAgent{} }
func (*SpawnAgent) ProtoMessage()               {}
func (*SpawnAgent) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{18} }

type ServiceValue struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,json=value,proto3" json:"Value,omitempty"`
}

func (m *ServiceValue) Reset()                    { *m = ServiceValue{} }
func (*ServiceValue) ProtoMessage()               {}
func (*ServiceValue) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{19} }

func (m *ServiceValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ServiceValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// 注册服务器
type AddService struct {
	ServiceName string          `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceType string          `protobuf:"bytes,2,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	Pid         *actor.PID      `protobuf:"bytes,3,opt,name=pid" json:"pid,omitempty"`
	Values      []*ServiceValue `protobuf:"bytes,4,rep,name=values" json:"values,omitempty"`
}

func (m *AddService) Reset()                    { *m = AddService{} }
func (*AddService) ProtoMessage()               {}
func (*AddService) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{20} }

func (m *AddService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *AddService) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *AddService) GetPid() *actor.PID {
	if m != nil {
		return m.Pid
	}
	return nil
}

func (m *AddService) GetValues() []*ServiceValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type AddServiceRep struct {
	Result GAErrorCode `protobuf:"varint,1,opt,name=result,proto3,enum=msgs.GAErrorCode" json:"result,omitempty"`
}

func (m *AddServiceRep) Reset()                    { *m = AddServiceRep{} }
func (*AddServiceRep) ProtoMessage()               {}
func (*AddServiceRep) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{21} }

func (m *AddServiceRep) GetResult() GAErrorCode {
	if m != nil {
		return m.Result
	}
	return OK
}

// 发送成功的通用返回
type SendOK struct {
}

func (m *SendOK) Reset()                    { *m = SendOK{} }
func (*SendOK) ProtoMessage()               {}
func (*SendOK) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{22} }

// 解注册服务器
type RemoveService struct {
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceType string `protobuf:"bytes,2,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
}

func (m *RemoveService) Reset()                    { *m = RemoveService{} }
func (*RemoveService) ProtoMessage()               {}
func (*RemoveService) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{23} }

func (m *RemoveService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RemoveService) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

// 分配服务器
type ApplyService struct {
	ServiceType string `protobuf:"bytes,1,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
}

func (m *ApplyService) Reset()                    { *m = ApplyService{} }
func (*ApplyService) ProtoMessage()               {}
func (*ApplyService) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{24} }

func (m *ApplyService) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

// 分配服务器,返回
type ApplyServiceResult struct {
	ServiceType string          `protobuf:"bytes,1,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	ServiceName string          `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Pid         *actor.PID      `protobuf:"bytes,3,opt,name=pid" json:"pid,omitempty"`
	Values      []*ServiceValue `protobuf:"bytes,4,rep,name=values" json:"values,omitempty"`
	Result      GAErrorCode     `protobuf:"varint,5,opt,name=result,proto3,enum=msgs.GAErrorCode" json:"result,omitempty"`
}

func (m *ApplyServiceResult) Reset()                    { *m = ApplyServiceResult{} }
func (*ApplyServiceResult) ProtoMessage()               {}
func (*ApplyServiceResult) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{25} }

func (m *ApplyServiceResult) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *ApplyServiceResult) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ApplyServiceResult) GetPid() *actor.PID {
	if m != nil {
		return m.Pid
	}
	return nil
}

func (m *ApplyServiceResult) GetValues() []*ServiceValue {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ApplyServiceResult) GetResult() GAErrorCode {
	if m != nil {
		return m.Result
	}
	return OK
}

// 分配所有服务器
type GetTypeServices struct {
	ServiceType string `protobuf:"bytes,1,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
}

func (m *GetTypeServices) Reset()                    { *m = GetTypeServices{} }
func (*GetTypeServices) ProtoMessage()               {}
func (*GetTypeServices) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{26} }

func (m *GetTypeServices) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

type GetTypeServicesResult struct {
	Pids []*actor.PID `protobuf:"bytes,1,rep,name=pids" json:"pids,omitempty"`
}

func (m *GetTypeServicesResult) Reset()                    { *m = GetTypeServicesResult{} }
func (*GetTypeServicesResult) ProtoMessage()               {}
func (*GetTypeServicesResult) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{27} }

func (m *GetTypeServicesResult) GetPids() []*actor.PID {
	if m != nil {
		return m.Pids
	}
	return nil
}

// 长传更新服务器信息
type UploadService struct {
	ServiceName string       `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Load        uint32       `protobuf:"varint,2,opt,name=load,proto3" json:"load,omitempty"`
	State       ServiceState `protobuf:"varint,3,opt,name=state,proto3,enum=msgs.ServiceState" json:"state,omitempty"`
}

func (m *UploadService) Reset()                    { *m = UploadService{} }
func (*UploadService) ProtoMessage()               {}
func (*UploadService) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{28} }

func (m *UploadService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *UploadService) GetLoad() uint32 {
	if m != nil {
		return m.Load
	}
	return 0
}

func (m *UploadService) GetState() ServiceState {
	if m != nil {
		return m.State
	}
	return ServiceStateFree
}

// 登录
type UserLogin struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Uid     uint64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *UserLogin) Reset()                    { *m = UserLogin{} }
func (*UserLogin) ProtoMessage()               {}
func (*UserLogin) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{29} }

func (m *UserLogin) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UserLogin) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// 获取玩家session信息
type GetSessionInfo struct {
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *GetSessionInfo) Reset()                    { *m = GetSessionInfo{} }
func (*GetSessionInfo) ProtoMessage()               {}
func (*GetSessionInfo) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{30} }

func (m *GetSessionInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetSessionInfoByName struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetSessionInfoByName) Reset()                    { *m = GetSessionInfoByName{} }
func (*GetSessionInfoByName) ProtoMessage()               {}
func (*GetSessionInfoByName) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{31} }

func (m *GetSessionInfoByName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetSessionInfoResult struct {
	UserInfo *UserBaseInfo `protobuf:"bytes,1,opt,name=userInfo" json:"userInfo,omitempty"`
	AgentPID *actor.PID    `protobuf:"bytes,2,opt,name=agentPID" json:"agentPID,omitempty"`
	Result   GAErrorCode   `protobuf:"varint,3,opt,name=result,proto3,enum=msgs.GAErrorCode" json:"result,omitempty"`
}

func (m *GetSessionInfoResult) Reset()                    { *m = GetSessionInfoResult{} }
func (*GetSessionInfoResult) ProtoMessage()               {}
func (*GetSessionInfoResult) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{32} }

func (m *GetSessionInfoResult) GetUserInfo() *UserBaseInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *GetSessionInfoResult) GetAgentPID() *actor.PID {
	if m != nil {
		return m.AgentPID
	}
	return nil
}

func (m *GetSessionInfoResult) GetResult() GAErrorCode {
	if m != nil {
		return m.Result
	}
	return OK
}

// 玩家断线
type ClientDisconnect struct {
}

func (m *ClientDisconnect) Reset()                    { *m = ClientDisconnect{} }
func (*ClientDisconnect) ProtoMessage()               {}
func (*ClientDisconnect) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{33} }

// gate收到消息
type ReceviceClientMsg struct {
	Rawdata []byte `protobuf:"bytes,1,opt,name=rawdata,proto3" json:"rawdata,omitempty"`
}

func (m *ReceviceClientMsg) Reset()                    { *m = ReceviceClientMsg{} }
func (*ReceviceClientMsg) ProtoMessage()               {}
func (*ReceviceClientMsg) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{34} }

func (m *ReceviceClientMsg) GetRawdata() []byte {
	if m != nil {
		return m.Rawdata
	}
	return nil
}

// 玩家离开
type UserLeave struct {
	Uid    uint64     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	From   ServerType `protobuf:"varint,2,opt,name=from,proto3,enum=msgs.ServerType" json:"from,omitempty"`
	Reason string     `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *UserLeave) Reset()                    { *m = UserLeave{} }
func (*UserLeave) ProtoMessage()               {}
func (*UserLeave) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{35} }

func (m *UserLeave) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserLeave) GetFrom() ServerType {
	if m != nil {
		return m.From
	}
	return ST_NONE
}

func (m *UserLeave) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// 踢下线
type Kick struct {
	Uid    uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *Kick) Reset()                    { *m = Kick{} }
func (*Kick) ProtoMessage()               {}
func (*Kick) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{36} }

func (m *Kick) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Kick) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// 服务器check
type ServerCheckLogin struct {
	Uid      uint64     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Key      string     `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	AgentPID *actor.PID `protobuf:"bytes,3,opt,name=agentPID" json:"agentPID,omitempty"`
}

func (m *ServerCheckLogin) Reset()                    { *m = ServerCheckLogin{} }
func (*ServerCheckLogin) ProtoMessage()               {}
func (*ServerCheckLogin) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{37} }

func (m *ServerCheckLogin) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ServerCheckLogin) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ServerCheckLogin) GetAgentPID() *actor.PID {
	if m != nil {
		return m.AgentPID
	}
	return nil
}

// 服务器绑定信息
type UserBindServer struct {
	Channel ChannelType `protobuf:"varint,1,opt,name=channel,proto3,enum=msgs.ChannelType" json:"channel,omitempty"`
	Pid     *actor.PID  `protobuf:"bytes,2,opt,name=pid" json:"pid,omitempty"`
}

func (m *UserBindServer) Reset()                    { *m = UserBindServer{} }
func (*UserBindServer) ProtoMessage()               {}
func (*UserBindServer) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{38} }

func (m *UserBindServer) GetChannel() ChannelType {
	if m != nil {
		return m.Channel
	}
	return Login
}

func (m *UserBindServer) GetPid() *actor.PID {
	if m != nil {
		return m.Pid
	}
	return nil
}

// 人物基本信息
type UserBaseInfo struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Uid     uint64 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Lv      uint64 `protobuf:"varint,4,opt,name=lv,proto3" json:"lv,omitempty"`
	Exp     uint64 `protobuf:"varint,5,opt,name=exp,proto3" json:"exp,omitempty"`
	Exptime uint64 `protobuf:"varint,6,opt,name=exptime,proto3" json:"exptime,omitempty"`
}

func (m *UserBaseInfo) Reset()                    { *m = UserBaseInfo{} }
func (*UserBaseInfo) ProtoMessage()               {}
func (*UserBaseInfo) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{39} }

func (m *UserBaseInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UserBaseInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserBaseInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserBaseInfo) GetLv() uint64 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *UserBaseInfo) GetExp() uint64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *UserBaseInfo) GetExptime() uint64 {
	if m != nil {
		return m.Exptime
	}
	return 0
}

// 验证结果
type CheckLoginResult struct {
	Result      GAErrorCode       `protobuf:"varint,1,opt,name=result,proto3,enum=msgs.GAErrorCode" json:"result,omitempty"`
	BaseInfo    *UserBaseInfo     `protobuf:"bytes,2,opt,name=baseInfo" json:"baseInfo,omitempty"`
	BindServers []*UserBindServer `protobuf:"bytes,3,rep,name=bindServers" json:"bindServers,omitempty"`
}

func (m *CheckLoginResult) Reset()                    { *m = CheckLoginResult{} }
func (*CheckLoginResult) ProtoMessage()               {}
func (*CheckLoginResult) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{40} }

func (m *CheckLoginResult) GetResult() GAErrorCode {
	if m != nil {
		return m.Result
	}
	return OK
}

func (m *CheckLoginResult) GetBaseInfo() *UserBaseInfo {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *CheckLoginResult) GetBindServers() []*UserBindServer {
	if m != nil {
		return m.BindServers
	}
	return nil
}

// 创建玩家
type CreatePlayer struct {
	Uid      uint64     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AgentPID *actor.PID `protobuf:"bytes,2,opt,name=agentPID" json:"agentPID,omitempty"`
	Sender   *actor.PID `protobuf:"bytes,3,opt,name=sender" json:"sender,omitempty"`
	GatePID  *actor.PID `protobuf:"bytes,4,opt,name=gatePID" json:"gatePID,omitempty"`
	Key      string     `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CreatePlayer) Reset()                    { *m = CreatePlayer{} }
func (*CreatePlayer) ProtoMessage()               {}
func (*CreatePlayer) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{41} }

func (m *CreatePlayer) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CreatePlayer) GetAgentPID() *actor.PID {
	if m != nil {
		return m.AgentPID
	}
	return nil
}

func (m *CreatePlayer) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *CreatePlayer) GetGatePID() *actor.PID {
	if m != nil {
		return m.GatePID
	}
	return nil
}

func (m *CreatePlayer) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type CreatePlayerResult struct {
	Result    GAErrorCode   `protobuf:"varint,1,opt,name=result,proto3,enum=msgs.GAErrorCode" json:"result,omitempty"`
	BaseInfo  *UserBaseInfo `protobuf:"bytes,2,opt,name=baseInfo" json:"baseInfo,omitempty"`
	PlayerPID *actor.PID    `protobuf:"bytes,3,opt,name=playerPID" json:"playerPID,omitempty"`
	TransData *CreatePlayer `protobuf:"bytes,4,opt,name=transData" json:"transData,omitempty"`
	RoomPID   *actor.PID    `protobuf:"bytes,5,opt,name=roomPID" json:"roomPID,omitempty"`
}

func (m *CreatePlayerResult) Reset()                    { *m = CreatePlayerResult{} }
func (*CreatePlayerResult) ProtoMessage()               {}
func (*CreatePlayerResult) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{42} }

func (m *CreatePlayerResult) GetResult() GAErrorCode {
	if m != nil {
		return m.Result
	}
	return OK
}

func (m *CreatePlayerResult) GetBaseInfo() *UserBaseInfo {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *CreatePlayerResult) GetPlayerPID() *actor.PID {
	if m != nil {
		return m.PlayerPID
	}
	return nil
}

func (m *CreatePlayerResult) GetTransData() *CreatePlayer {
	if m != nil {
		return m.TransData
	}
	return nil
}

func (m *CreatePlayerResult) GetRoomPID() *actor.PID {
	if m != nil {
		return m.RoomPID
	}
	return nil
}

// 掉线
type PlayerOutline struct {
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *PlayerOutline) Reset()                    { *m = PlayerOutline{} }
func (*PlayerOutline) ProtoMessage()               {}
func (*PlayerOutline) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{43} }

func (m *PlayerOutline) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// 心跳
type Tick struct {
}

func (m *Tick) Reset()                    { *m = Tick{} }
func (*Tick) ProtoMessage()               {}
func (*Tick) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{44} }

// 定时刷新
type TimeFlush struct {
}

func (m *TimeFlush) Reset()                    { *m = TimeFlush{} }
func (*TimeFlush) ProtoMessage()               {}
func (*TimeFlush) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{45} }

type BattleRoomInfo struct {
	Uid   uint64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Rtype int32    `protobuf:"varint,2,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Boss  int32    `protobuf:"varint,3,opt,name=boss,proto3" json:"boss,omitempty"`
	Key   string   `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Hero  int32    `protobuf:"varint,5,opt,name=hero,proto3" json:"hero,omitempty"`
	Card  []string `protobuf:"bytes,6,rep,name=card" json:"card,omitempty"`
	Equip []int32  `protobuf:"varint,7,rep,packed,name=equip" json:"equip,omitempty"`
	Name  string   `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Lv    int32    `protobuf:"varint,9,opt,name=lv,proto3" json:"lv,omitempty"`
	Ai    int32    `protobuf:"varint,10,opt,name=ai,proto3" json:"ai,omitempty"`
}

func (m *BattleRoomInfo) Reset()                    { *m = BattleRoomInfo{} }
func (*BattleRoomInfo) ProtoMessage()               {}
func (*BattleRoomInfo) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{46} }

func (m *BattleRoomInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *BattleRoomInfo) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *BattleRoomInfo) GetBoss() int32 {
	if m != nil {
		return m.Boss
	}
	return 0
}

func (m *BattleRoomInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *BattleRoomInfo) GetHero() int32 {
	if m != nil {
		return m.Hero
	}
	return 0
}

func (m *BattleRoomInfo) GetCard() []string {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *BattleRoomInfo) GetEquip() []int32 {
	if m != nil {
		return m.Equip
	}
	return nil
}

func (m *BattleRoomInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BattleRoomInfo) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *BattleRoomInfo) GetAi() int32 {
	if m != nil {
		return m.Ai
	}
	return 0
}

type GetLobbyInfo struct {
}

func (m *GetLobbyInfo) Reset()                    { *m = GetLobbyInfo{} }
func (*GetLobbyInfo) ProtoMessage()               {}
func (*GetLobbyInfo) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{47} }

type LobbyQueueData struct {
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Num  int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *LobbyQueueData) Reset()                    { *m = LobbyQueueData{} }
func (*LobbyQueueData) ProtoMessage()               {}
func (*LobbyQueueData) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{48} }

func (m *LobbyQueueData) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LobbyQueueData) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type BattleServerData struct {
	Addr  string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Num   int32  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	State int32  `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *BattleServerData) Reset()                    { *m = BattleServerData{} }
func (*BattleServerData) ProtoMessage()               {}
func (*BattleServerData) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{49} }

func (m *BattleServerData) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *BattleServerData) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *BattleServerData) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type GetLobbyInfoResult struct {
	Queuedata        []*LobbyQueueData   `protobuf:"bytes,1,rep,name=queuedata" json:"queuedata,omitempty"`
	BattleServerData []*BattleServerData `protobuf:"bytes,2,rep,name=battleServerData" json:"battleServerData,omitempty"`
}

func (m *GetLobbyInfoResult) Reset()                    { *m = GetLobbyInfoResult{} }
func (*GetLobbyInfoResult) ProtoMessage()               {}
func (*GetLobbyInfoResult) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{50} }

func (m *GetLobbyInfoResult) GetQueuedata() []*LobbyQueueData {
	if m != nil {
		return m.Queuedata
	}
	return nil
}

func (m *GetLobbyInfoResult) GetBattleServerData() []*BattleServerData {
	if m != nil {
		return m.BattleServerData
	}
	return nil
}

type GetBattleServer struct {
	Uid   uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Rtype int32  `protobuf:"varint,2,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Boss  int32  `protobuf:"varint,3,opt,name=boss,proto3" json:"boss,omitempty"`
	// bytes roomInfo = 4;
	Oppuid  uint64     `protobuf:"varint,4,opt,name=oppuid,proto3" json:"oppuid,omitempty"`
	SelfPID *actor.PID `protobuf:"bytes,5,opt,name=selfPID" json:"selfPID,omitempty"`
}

func (m *GetBattleServer) Reset()                    { *m = GetBattleServer{} }
func (*GetBattleServer) ProtoMessage()               {}
func (*GetBattleServer) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{51} }

func (m *GetBattleServer) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetBattleServer) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *GetBattleServer) GetBoss() int32 {
	if m != nil {
		return m.Boss
	}
	return 0
}

func (m *GetBattleServer) GetOppuid() uint64 {
	if m != nil {
		return m.Oppuid
	}
	return 0
}

func (m *GetBattleServer) GetSelfPID() *actor.PID {
	if m != nil {
		return m.SelfPID
	}
	return nil
}

type GetBattleServerResult struct {
	BattlePID *actor.PID  `protobuf:"bytes,1,opt,name=battlePID" json:"battlePID,omitempty"`
	RoomId    string      `protobuf:"bytes,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Result    GAErrorCode `protobuf:"varint,3,opt,name=result,proto3,enum=msgs.GAErrorCode" json:"result,omitempty"`
}

func (m *GetBattleServerResult) Reset()                    { *m = GetBattleServerResult{} }
func (*GetBattleServerResult) ProtoMessage()               {}
func (*GetBattleServerResult) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{52} }

func (m *GetBattleServerResult) GetBattlePID() *actor.PID {
	if m != nil {
		return m.BattlePID
	}
	return nil
}

func (m *GetBattleServerResult) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *GetBattleServerResult) GetResult() GAErrorCode {
	if m != nil {
		return m.Result
	}
	return OK
}

type JoinBattleQueue struct {
	Uid      uint64     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Rtype    int32      `protobuf:"varint,2,opt,name=rtype,proto3" json:"rtype,omitempty"`
	RoomInfo []byte     `protobuf:"bytes,3,opt,name=roomInfo,proto3" json:"roomInfo,omitempty"`
	Sender   *actor.PID `protobuf:"bytes,4,opt,name=sender" json:"sender,omitempty"`
	AiNum    int32      `protobuf:"varint,5,opt,name=aiNum,proto3" json:"aiNum,omitempty"`
}

func (m *JoinBattleQueue) Reset()                    { *m = JoinBattleQueue{} }
func (*JoinBattleQueue) ProtoMessage()               {}
func (*JoinBattleQueue) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{53} }

func (m *JoinBattleQueue) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *JoinBattleQueue) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *JoinBattleQueue) GetRoomInfo() []byte {
	if m != nil {
		return m.RoomInfo
	}
	return nil
}

func (m *JoinBattleQueue) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *JoinBattleQueue) GetAiNum() int32 {
	if m != nil {
		return m.AiNum
	}
	return 0
}

type JoinBattleQueueResult struct {
	Waittime uint64      `protobuf:"varint,1,opt,name=waittime,proto3" json:"waittime,omitempty"`
	Result   GAErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=msgs.GAErrorCode" json:"result,omitempty"`
}

func (m *JoinBattleQueueResult) Reset()                    { *m = JoinBattleQueueResult{} }
func (*JoinBattleQueueResult) ProtoMessage()               {}
func (*JoinBattleQueueResult) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{54} }

func (m *JoinBattleQueueResult) GetWaittime() uint64 {
	if m != nil {
		return m.Waittime
	}
	return 0
}

func (m *JoinBattleQueueResult) GetResult() GAErrorCode {
	if m != nil {
		return m.Result
	}
	return OK
}

type LeaveBattleQueue struct {
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *LeaveBattleQueue) Reset()                    { *m = LeaveBattleQueue{} }
func (*LeaveBattleQueue) ProtoMessage()               {}
func (*LeaveBattleQueue) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{55} }

func (m *LeaveBattleQueue) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type MatchBattle struct {
	BattleAddr string      `protobuf:"bytes,1,opt,name=battleAddr,proto3" json:"battleAddr,omitempty"`
	RoomId     string      `protobuf:"bytes,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Uid        uint64      `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Rtype      int32       `protobuf:"varint,4,opt,name=rtype,proto3" json:"rtype,omitempty"`
	RoomInfo   []byte      `protobuf:"bytes,5,opt,name=roomInfo,proto3" json:"roomInfo,omitempty"`
	Result     GAErrorCode `protobuf:"varint,6,opt,name=result,proto3,enum=msgs.GAErrorCode" json:"result,omitempty"`
	RoomPID    *actor.PID  `protobuf:"bytes,7,opt,name=roomPID" json:"roomPID,omitempty"`
}

func (m *MatchBattle) Reset()                    { *m = MatchBattle{} }
func (*MatchBattle) ProtoMessage()               {}
func (*MatchBattle) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{56} }

func (m *MatchBattle) GetBattleAddr() string {
	if m != nil {
		return m.BattleAddr
	}
	return ""
}

func (m *MatchBattle) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *MatchBattle) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *MatchBattle) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *MatchBattle) GetRoomInfo() []byte {
	if m != nil {
		return m.RoomInfo
	}
	return nil
}

func (m *MatchBattle) GetResult() GAErrorCode {
	if m != nil {
		return m.Result
	}
	return OK
}

func (m *MatchBattle) GetRoomPID() *actor.PID {
	if m != nil {
		return m.RoomPID
	}
	return nil
}

type CreateBattlePlayer struct {
	Uid       uint64     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Skin      int32      `protobuf:"varint,3,opt,name=skin,proto3" json:"skin,omitempty"`
	AgentPID  *actor.PID `protobuf:"bytes,4,opt,name=agentPID" json:"agentPID,omitempty"`
	PlayerPID *actor.PID `protobuf:"bytes,5,opt,name=playerPID" json:"playerPID,omitempty"`
}

func (m *CreateBattlePlayer) Reset()                    { *m = CreateBattlePlayer{} }
func (*CreateBattlePlayer) ProtoMessage()               {}
func (*CreateBattlePlayer) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{57} }

func (m *CreateBattlePlayer) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CreateBattlePlayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateBattlePlayer) GetSkin() int32 {
	if m != nil {
		return m.Skin
	}
	return 0
}

func (m *CreateBattlePlayer) GetAgentPID() *actor.PID {
	if m != nil {
		return m.AgentPID
	}
	return nil
}

func (m *CreateBattlePlayer) GetPlayerPID() *actor.PID {
	if m != nil {
		return m.PlayerPID
	}
	return nil
}

type CreateBattle struct {
	RoomId  string                `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	StageId int32                 `protobuf:"varint,2,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Rtype   int32                 `protobuf:"varint,3,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Players []*CreateBattlePlayer `protobuf:"bytes,4,rep,name=players" json:"players,omitempty"`
}

func (m *CreateBattle) Reset()                    { *m = CreateBattle{} }
func (*CreateBattle) ProtoMessage()               {}
func (*CreateBattle) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{58} }

func (m *CreateBattle) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *CreateBattle) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *CreateBattle) GetRtype() int32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *CreateBattle) GetPlayers() []*CreateBattlePlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

type CreateBattleRep struct {
	RoomPID *actor.PID  `protobuf:"bytes,1,opt,name=roomPID" json:"roomPID,omitempty"`
	Result  GAErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=msgs.GAErrorCode" json:"result,omitempty"`
}

func (m *CreateBattleRep) Reset()                    { *m = CreateBattleRep{} }
func (*CreateBattleRep) ProtoMessage()               {}
func (*CreateBattleRep) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{59} }

func (m *CreateBattleRep) GetRoomPID() *actor.PID {
	if m != nil {
		return m.RoomPID
	}
	return nil
}

func (m *CreateBattleRep) GetResult() GAErrorCode {
	if m != nil {
		return m.Result
	}
	return OK
}

type JoinBattle struct {
	RoomId string              `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Player *CreateBattlePlayer `protobuf:"bytes,2,opt,name=player" json:"player,omitempty"`
}

func (m *JoinBattle) Reset()                    { *m = JoinBattle{} }
func (*JoinBattle) ProtoMessage()               {}
func (*JoinBattle) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{60} }

func (m *JoinBattle) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *JoinBattle) GetPlayer() *CreateBattlePlayer {
	if m != nil {
		return m.Player
	}
	return nil
}

type AttachBattle struct {
	RoomPID *actor.PID `protobuf:"bytes,1,opt,name=roomPID" json:"roomPID,omitempty"`
}

func (m *AttachBattle) Reset()                    { *m = AttachBattle{} }
func (*AttachBattle) ProtoMessage()               {}
func (*AttachBattle) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{61} }

func (m *AttachBattle) GetRoomPID() *actor.PID {
	if m != nil {
		return m.RoomPID
	}
	return nil
}

type DetachBattle struct {
}

func (m *DetachBattle) Reset()                    { *m = DetachBattle{} }
func (*DetachBattle) ProtoMessage()               {}
func (*DetachBattle) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{62} }

type RecoverBattle struct {
	Uid      uint64     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AgentPID *actor.PID `protobuf:"bytes,2,opt,name=agentPID" json:"agentPID,omitempty"`
}

func (m *RecoverBattle) Reset()                    { *m = RecoverBattle{} }
func (*RecoverBattle) ProtoMessage()               {}
func (*RecoverBattle) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{63} }

func (m *RecoverBattle) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RecoverBattle) GetAgentPID() *actor.PID {
	if m != nil {
		return m.AgentPID
	}
	return nil
}

type RecoverBattleRep struct {
	RoomPID *actor.PID  `protobuf:"bytes,1,opt,name=roomPID" json:"roomPID,omitempty"`
	Result  GAErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=msgs.GAErrorCode" json:"result,omitempty"`
}

func (m *RecoverBattleRep) Reset()                    { *m = RecoverBattleRep{} }
func (*RecoverBattleRep) ProtoMessage()               {}
func (*RecoverBattleRep) Descriptor() ([]byte, []int) { return fileDescriptorProtos, []int{64} }

func (m *RecoverBattleRep) GetRoomPID() *actor.PID {
	if m != nil {
		return m.RoomPID
	}
	return nil
}

func (m *RecoverBattleRep) GetResult() GAErrorCode {
	if m != nil {
		return m.Result
	}
	return OK
}

func init() {
	proto.RegisterType((*CheckLogin)(nil), "msgs.CheckLogin")
	proto.RegisterType((*HeartBeatMsg)(nil), "msgs.HeartBeatMsg")
	proto.RegisterType((*C2S_ShopBuyMsg)(nil), "msgs.C2S_ShopBuyMsg")
	proto.RegisterType((*S2C_ShopBuyMsg)(nil), "msgs.S2C_ShopBuyMsg")
	proto.RegisterType((*FrameMsg)(nil), "msgs.FrameMsg")
	proto.RegisterType((*FrameMsgJson)(nil), "msgs.FrameMsgJson")
	proto.RegisterType((*FrameMsgReq)(nil), "msgs.FrameMsgReq")
	proto.RegisterType((*FrameMsgRep)(nil), "msgs.FrameMsgRep")
	proto.RegisterType((*UnicastFrameMsg)(nil), "msgs.UnicastFrameMsg")
	proto.RegisterType((*MulticastFrameMsg)(nil), "msgs.MulticastFrameMsg")
	proto.RegisterType((*BroadcastFrameMsg)(nil), "msgs.BroadcastFrameMsg")
	proto.RegisterType((*BroadcastFrameMsgJson)(nil), "msgs.BroadcastFrameMsgJson")
	proto.RegisterType((*AddAgentToParent)(nil), "msgs.AddAgentToParent")
	proto.RegisterType((*RemoveAgentFromParent)(nil), "msgs.RemoveAgentFromParent")
	proto.RegisterType((*NewChild)(nil), "msgs.NewChild")
	proto.RegisterType((*NewChildResult)(nil), "msgs.NewChildResult")
	proto.RegisterType((*Connect)(nil), "msgs.Connect")
	proto.RegisterType((*Connected)(nil), "msgs.Connected")
	proto.RegisterType((*SpawnAgent)(nil), "msgs.SpawnAgent")
	proto.RegisterType((*ServiceValue)(nil), "msgs.ServiceValue")
	proto.RegisterType((*AddService)(nil), "msgs.AddService")
	proto.RegisterType((*AddServiceRep)(nil), "msgs.AddServiceRep")
	proto.RegisterType((*SendOK)(nil), "msgs.SendOK")
	proto.RegisterType((*RemoveService)(nil), "msgs.RemoveService")
	proto.RegisterType((*ApplyService)(nil), "msgs.ApplyService")
	proto.RegisterType((*ApplyServiceResult)(nil), "msgs.ApplyServiceResult")
	proto.RegisterType((*GetTypeServices)(nil), "msgs.GetTypeServices")
	proto.RegisterType((*GetTypeServicesResult)(nil), "msgs.GetTypeServicesResult")
	proto.RegisterType((*UploadService)(nil), "msgs.UploadService")
	proto.RegisterType((*UserLogin)(nil), "msgs.UserLogin")
	proto.RegisterType((*GetSessionInfo)(nil), "msgs.GetSessionInfo")
	proto.RegisterType((*GetSessionInfoByName)(nil), "msgs.GetSessionInfoByName")
	proto.RegisterType((*GetSessionInfoResult)(nil), "msgs.GetSessionInfoResult")
	proto.RegisterType((*ClientDisconnect)(nil), "msgs.ClientDisconnect")
	proto.RegisterType((*ReceviceClientMsg)(nil), "msgs.ReceviceClientMsg")
	proto.RegisterType((*UserLeave)(nil), "msgs.UserLeave")
	proto.RegisterType((*Kick)(nil), "msgs.Kick")
	proto.RegisterType((*ServerCheckLogin)(nil), "msgs.ServerCheckLogin")
	proto.RegisterType((*UserBindServer)(nil), "msgs.UserBindServer")
	proto.RegisterType((*UserBaseInfo)(nil), "msgs.UserBaseInfo")
	proto.RegisterType((*CheckLoginResult)(nil), "msgs.CheckLoginResult")
	proto.RegisterType((*CreatePlayer)(nil), "msgs.CreatePlayer")
	proto.RegisterType((*CreatePlayerResult)(nil), "msgs.CreatePlayerResult")
	proto.RegisterType((*PlayerOutline)(nil), "msgs.PlayerOutline")
	proto.RegisterType((*Tick)(nil), "msgs.Tick")
	proto.RegisterType((*TimeFlush)(nil), "msgs.TimeFlush")
	proto.RegisterType((*BattleRoomInfo)(nil), "msgs.BattleRoomInfo")
	proto.RegisterType((*GetLobbyInfo)(nil), "msgs.GetLobbyInfo")
	proto.RegisterType((*LobbyQueueData)(nil), "msgs.LobbyQueueData")
	proto.RegisterType((*BattleServerData)(nil), "msgs.BattleServerData")
	proto.RegisterType((*GetLobbyInfoResult)(nil), "msgs.GetLobbyInfoResult")
	proto.RegisterType((*GetBattleServer)(nil), "msgs.GetBattleServer")
	proto.RegisterType((*GetBattleServerResult)(nil), "msgs.GetBattleServerResult")
	proto.RegisterType((*JoinBattleQueue)(nil), "msgs.JoinBattleQueue")
	proto.RegisterType((*JoinBattleQueueResult)(nil), "msgs.JoinBattleQueueResult")
	proto.RegisterType((*LeaveBattleQueue)(nil), "msgs.LeaveBattleQueue")
	proto.RegisterType((*MatchBattle)(nil), "msgs.MatchBattle")
	proto.RegisterType((*CreateBattlePlayer)(nil), "msgs.CreateBattlePlayer")
	proto.RegisterType((*CreateBattle)(nil), "msgs.CreateBattle")
	proto.RegisterType((*CreateBattleRep)(nil), "msgs.CreateBattleRep")
	proto.RegisterType((*JoinBattle)(nil), "msgs.JoinBattle")
	proto.RegisterType((*AttachBattle)(nil), "msgs.AttachBattle")
	proto.RegisterType((*DetachBattle)(nil), "msgs.DetachBattle")
	proto.RegisterType((*RecoverBattle)(nil), "msgs.RecoverBattle")
	proto.RegisterType((*RecoverBattleRep)(nil), "msgs.RecoverBattleRep")
	proto.RegisterEnum("msgs.ShopMsgType", ShopMsgType_name, ShopMsgType_value)
	proto.RegisterEnum("msgs.BagMsgType", BagMsgType_name, BagMsgType_value)
	proto.RegisterEnum("msgs.ServiceState", ServiceState_name, ServiceState_value)
}
func (x ShopMsgType) String() string {
	s, ok := ShopMsgType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BagMsgType) String() string {
	s, ok := BagMsgType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ServiceState) String() string {
	s, ok := ServiceState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CheckLogin) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckLogin)
	if !ok {
		that2, ok := that.(CheckLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *HeartBeatMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HeartBeatMsg)
	if !ok {
		that2, ok := that.(HeartBeatMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *C2S_ShopBuyMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*C2S_ShopBuyMsg)
	if !ok {
		that2, ok := that.(C2S_ShopBuyMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	return true
}
func (this *S2C_ShopBuyMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*S2C_ShopBuyMsg)
	if !ok {
		that2, ok := that.(S2C_ShopBuyMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *FrameMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrameMsg)
	if !ok {
		that2, ok := that.(FrameMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if this.MsgId != that1.MsgId {
		return false
	}
	if !bytes.Equal(this.RawData, that1.RawData) {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *FrameMsgJson) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrameMsgJson)
	if !ok {
		that2, ok := that.(FrameMsgJson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if this.MsgId != that1.MsgId {
		return false
	}
	if !bytes.Equal(this.RawData, that1.RawData) {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *FrameMsgReq) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrameMsgReq)
	if !ok {
		that2, ok := that.(FrameMsgReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Frame.Equal(that1.Frame) {
		return false
	}
	if this.Cno != that1.Cno {
		return false
	}
	return true
}
func (this *FrameMsgRep) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FrameMsgRep)
	if !ok {
		that2, ok := that.(FrameMsgRep)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	return true
}
func (this *UnicastFrameMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnicastFrameMsg)
	if !ok {
		that2, ok := that.(UnicastFrameMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FrameMsg.Equal(that1.FrameMsg) {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	return true
}
func (this *MulticastFrameMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MulticastFrameMsg)
	if !ok {
		that2, ok := that.(MulticastFrameMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FrameMsg.Equal(that1.FrameMsg) {
		return false
	}
	if len(this.Targets) != len(that1.Targets) {
		return false
	}
	for i := range this.Targets {
		if this.Targets[i] != that1.Targets[i] {
			return false
		}
	}
	return true
}
func (this *BroadcastFrameMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BroadcastFrameMsg)
	if !ok {
		that2, ok := that.(BroadcastFrameMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FrameMsg.Equal(that1.FrameMsg) {
		return false
	}
	return true
}
func (this *BroadcastFrameMsgJson) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BroadcastFrameMsgJson)
	if !ok {
		that2, ok := that.(BroadcastFrameMsgJson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FrameMsg.Equal(that1.FrameMsg) {
		return false
	}
	return true
}
func (this *AddAgentToParent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AddAgentToParent)
	if !ok {
		that2, ok := that.(AddAgentToParent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	return true
}
func (this *RemoveAgentFromParent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RemoveAgentFromParent)
	if !ok {
		that2, ok := that.(RemoveAgentFromParent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *NewChild) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewChild)
	if !ok {
		that2, ok := that.(NewChild)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *NewChildResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewChildResult)
	if !ok {
		that2, ok := that.(NewChildResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Pid.Equal(that1.Pid) {
		return false
	}
	return true
}
func (this *Connect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Connect)
	if !ok {
		that2, ok := that.(Connect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	return true
}
func (this *Connected) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Connected)
	if !ok {
		that2, ok := that.(Connected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *SpawnAgent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SpawnAgent)
	if !ok {
		that2, ok := that.(SpawnAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceValue)
	if !ok {
		that2, ok := that.(ServiceValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *AddService) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AddService)
	if !ok {
		that2, ok := that.(AddService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.ServiceType != that1.ServiceType {
		return false
	}
	if !this.Pid.Equal(that1.Pid) {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *AddServiceRep) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AddServiceRep)
	if !ok {
		that2, ok := that.(AddServiceRep)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *SendOK) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SendOK)
	if !ok {
		that2, ok := that.(SendOK)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *RemoveService) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RemoveService)
	if !ok {
		that2, ok := that.(RemoveService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.ServiceType != that1.ServiceType {
		return false
	}
	return true
}
func (this *ApplyService) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ApplyService)
	if !ok {
		that2, ok := that.(ApplyService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ServiceType != that1.ServiceType {
		return false
	}
	return true
}
func (this *ApplyServiceResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ApplyServiceResult)
	if !ok {
		that2, ok := that.(ApplyServiceResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ServiceType != that1.ServiceType {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if !this.Pid.Equal(that1.Pid) {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *GetTypeServices) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetTypeServices)
	if !ok {
		that2, ok := that.(GetTypeServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ServiceType != that1.ServiceType {
		return false
	}
	return true
}
func (this *GetTypeServicesResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetTypeServicesResult)
	if !ok {
		that2, ok := that.(GetTypeServicesResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Pids) != len(that1.Pids) {
		return false
	}
	for i := range this.Pids {
		if !this.Pids[i].Equal(that1.Pids[i]) {
			return false
		}
	}
	return true
}
func (this *UploadService) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UploadService)
	if !ok {
		that2, ok := that.(UploadService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.Load != that1.Load {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *UserLogin) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UserLogin)
	if !ok {
		that2, ok := that.(UserLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Account != that1.Account {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *GetSessionInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetSessionInfo)
	if !ok {
		that2, ok := that.(GetSessionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *GetSessionInfoByName) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetSessionInfoByName)
	if !ok {
		that2, ok := that.(GetSessionInfoByName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetSessionInfoResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetSessionInfoResult)
	if !ok {
		that2, ok := that.(GetSessionInfoResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UserInfo.Equal(that1.UserInfo) {
		return false
	}
	if !this.AgentPID.Equal(that1.AgentPID) {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *ClientDisconnect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ClientDisconnect)
	if !ok {
		that2, ok := that.(ClientDisconnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ReceviceClientMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReceviceClientMsg)
	if !ok {
		that2, ok := that.(ReceviceClientMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Rawdata, that1.Rawdata) {
		return false
	}
	return true
}
func (this *UserLeave) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UserLeave)
	if !ok {
		that2, ok := that.(UserLeave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *Kick) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Kick)
	if !ok {
		that2, ok := that.(Kick)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *ServerCheckLogin) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerCheckLogin)
	if !ok {
		that2, ok := that.(ServerCheckLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.AgentPID.Equal(that1.AgentPID) {
		return false
	}
	return true
}
func (this *UserBindServer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UserBindServer)
	if !ok {
		that2, ok := that.(UserBindServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if !this.Pid.Equal(that1.Pid) {
		return false
	}
	return true
}
func (this *UserBaseInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UserBaseInfo)
	if !ok {
		that2, ok := that.(UserBaseInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Account != that1.Account {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Lv != that1.Lv {
		return false
	}
	if this.Exp != that1.Exp {
		return false
	}
	if this.Exptime != that1.Exptime {
		return false
	}
	return true
}
func (this *CheckLoginResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckLoginResult)
	if !ok {
		that2, ok := that.(CheckLoginResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if !this.BaseInfo.Equal(that1.BaseInfo) {
		return false
	}
	if len(this.BindServers) != len(that1.BindServers) {
		return false
	}
	for i := range this.BindServers {
		if !this.BindServers[i].Equal(that1.BindServers[i]) {
			return false
		}
	}
	return true
}
func (this *CreatePlayer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreatePlayer)
	if !ok {
		that2, ok := that.(CreatePlayer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.AgentPID.Equal(that1.AgentPID) {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !this.GatePID.Equal(that1.GatePID) {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *CreatePlayerResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreatePlayerResult)
	if !ok {
		that2, ok := that.(CreatePlayerResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if !this.BaseInfo.Equal(that1.BaseInfo) {
		return false
	}
	if !this.PlayerPID.Equal(that1.PlayerPID) {
		return false
	}
	if !this.TransData.Equal(that1.TransData) {
		return false
	}
	if !this.RoomPID.Equal(that1.RoomPID) {
		return false
	}
	return true
}
func (this *PlayerOutline) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PlayerOutline)
	if !ok {
		that2, ok := that.(PlayerOutline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *Tick) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Tick)
	if !ok {
		that2, ok := that.(Tick)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *TimeFlush) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TimeFlush)
	if !ok {
		that2, ok := that.(TimeFlush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *BattleRoomInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BattleRoomInfo)
	if !ok {
		that2, ok := that.(BattleRoomInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Boss != that1.Boss {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Hero != that1.Hero {
		return false
	}
	if len(this.Card) != len(that1.Card) {
		return false
	}
	for i := range this.Card {
		if this.Card[i] != that1.Card[i] {
			return false
		}
	}
	if len(this.Equip) != len(that1.Equip) {
		return false
	}
	for i := range this.Equip {
		if this.Equip[i] != that1.Equip[i] {
			return false
		}
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Lv != that1.Lv {
		return false
	}
	if this.Ai != that1.Ai {
		return false
	}
	return true
}
func (this *GetLobbyInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetLobbyInfo)
	if !ok {
		that2, ok := that.(GetLobbyInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *LobbyQueueData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LobbyQueueData)
	if !ok {
		that2, ok := that.(LobbyQueueData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *BattleServerData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BattleServerData)
	if !ok {
		that2, ok := that.(BattleServerData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Addr != that1.Addr {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *GetLobbyInfoResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetLobbyInfoResult)
	if !ok {
		that2, ok := that.(GetLobbyInfoResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Queuedata) != len(that1.Queuedata) {
		return false
	}
	for i := range this.Queuedata {
		if !this.Queuedata[i].Equal(that1.Queuedata[i]) {
			return false
		}
	}
	if len(this.BattleServerData) != len(that1.BattleServerData) {
		return false
	}
	for i := range this.BattleServerData {
		if !this.BattleServerData[i].Equal(that1.BattleServerData[i]) {
			return false
		}
	}
	return true
}
func (this *GetBattleServer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetBattleServer)
	if !ok {
		that2, ok := that.(GetBattleServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Boss != that1.Boss {
		return false
	}
	if this.Oppuid != that1.Oppuid {
		return false
	}
	if !this.SelfPID.Equal(that1.SelfPID) {
		return false
	}
	return true
}
func (this *GetBattleServerResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetBattleServerResult)
	if !ok {
		that2, ok := that.(GetBattleServerResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BattlePID.Equal(that1.BattlePID) {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *JoinBattleQueue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JoinBattleQueue)
	if !ok {
		that2, ok := that.(JoinBattleQueue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if !bytes.Equal(this.RoomInfo, that1.RoomInfo) {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.AiNum != that1.AiNum {
		return false
	}
	return true
}
func (this *JoinBattleQueueResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JoinBattleQueueResult)
	if !ok {
		that2, ok := that.(JoinBattleQueueResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Waittime != that1.Waittime {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *LeaveBattleQueue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LeaveBattleQueue)
	if !ok {
		that2, ok := that.(LeaveBattleQueue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *MatchBattle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MatchBattle)
	if !ok {
		that2, ok := that.(MatchBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.BattleAddr != that1.BattleAddr {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if !bytes.Equal(this.RoomInfo, that1.RoomInfo) {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if !this.RoomPID.Equal(that1.RoomPID) {
		return false
	}
	return true
}
func (this *CreateBattlePlayer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateBattlePlayer)
	if !ok {
		that2, ok := that.(CreateBattlePlayer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Skin != that1.Skin {
		return false
	}
	if !this.AgentPID.Equal(that1.AgentPID) {
		return false
	}
	if !this.PlayerPID.Equal(that1.PlayerPID) {
		return false
	}
	return true
}
func (this *CreateBattle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateBattle)
	if !ok {
		that2, ok := that.(CreateBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.StageId != that1.StageId {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if len(this.Players) != len(that1.Players) {
		return false
	}
	for i := range this.Players {
		if !this.Players[i].Equal(that1.Players[i]) {
			return false
		}
	}
	return true
}
func (this *CreateBattleRep) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateBattleRep)
	if !ok {
		that2, ok := that.(CreateBattleRep)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RoomPID.Equal(that1.RoomPID) {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *JoinBattle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JoinBattle)
	if !ok {
		that2, ok := that.(JoinBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if !this.Player.Equal(that1.Player) {
		return false
	}
	return true
}
func (this *AttachBattle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AttachBattle)
	if !ok {
		that2, ok := that.(AttachBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RoomPID.Equal(that1.RoomPID) {
		return false
	}
	return true
}
func (this *DetachBattle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DetachBattle)
	if !ok {
		that2, ok := that.(DetachBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *RecoverBattle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecoverBattle)
	if !ok {
		that2, ok := that.(RecoverBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.AgentPID.Equal(that1.AgentPID) {
		return false
	}
	return true
}
func (this *RecoverBattleRep) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecoverBattleRep)
	if !ok {
		that2, ok := that.(RecoverBattleRep)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RoomPID.Equal(that1.RoomPID) {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *CheckLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.CheckLogin{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeartBeatMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&msgs.HeartBeatMsg{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C2S_ShopBuyMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.C2S_ShopBuyMsg{")
	s = append(s, "ItemId: "+fmt.Sprintf("%#v", this.ItemId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S2C_ShopBuyMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.S2C_ShopBuyMsg{")
	s = append(s, "ItemId: "+fmt.Sprintf("%#v", this.ItemId)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msgs.FrameMsg{")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	s = append(s, "MsgId: "+fmt.Sprintf("%#v", this.MsgId)+",\n")
	s = append(s, "RawData: "+fmt.Sprintf("%#v", this.RawData)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameMsgJson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msgs.FrameMsgJson{")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	s = append(s, "MsgId: "+fmt.Sprintf("%#v", this.MsgId)+",\n")
	s = append(s, "RawData: "+fmt.Sprintf("%#v", this.RawData)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameMsgReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.FrameMsgReq{")
	if this.Frame != nil {
		s = append(s, "Frame: "+fmt.Sprintf("%#v", this.Frame)+",\n")
	}
	s = append(s, "Cno: "+fmt.Sprintf("%#v", this.Cno)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrameMsgRep) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.FrameMsgRep{")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnicastFrameMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.UnicastFrameMsg{")
	if this.FrameMsg != nil {
		s = append(s, "FrameMsg: "+fmt.Sprintf("%#v", this.FrameMsg)+",\n")
	}
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MulticastFrameMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.MulticastFrameMsg{")
	if this.FrameMsg != nil {
		s = append(s, "FrameMsg: "+fmt.Sprintf("%#v", this.FrameMsg)+",\n")
	}
	s = append(s, "Targets: "+fmt.Sprintf("%#v", this.Targets)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BroadcastFrameMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.BroadcastFrameMsg{")
	if this.FrameMsg != nil {
		s = append(s, "FrameMsg: "+fmt.Sprintf("%#v", this.FrameMsg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BroadcastFrameMsgJson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.BroadcastFrameMsgJson{")
	if this.FrameMsg != nil {
		s = append(s, "FrameMsg: "+fmt.Sprintf("%#v", this.FrameMsg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddAgentToParent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.AddAgentToParent{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveAgentFromParent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.RemoveAgentFromParent{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewChild) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&msgs.NewChild{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewChildResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.NewChildResult{")
	if this.Pid != nil {
		s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Connect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.Connect{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Connected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.Connected{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpawnAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&msgs.SpawnAgent{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.ServiceValue{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msgs.AddService{")
	s = append(s, "ServiceName: "+fmt.Sprintf("%#v", this.ServiceName)+",\n")
	s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	if this.Pid != nil {
		s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	}
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddServiceRep) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.AddServiceRep{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendOK) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&msgs.SendOK{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.RemoveService{")
	s = append(s, "ServiceName: "+fmt.Sprintf("%#v", this.ServiceName)+",\n")
	s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplyService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.ApplyService{")
	s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplyServiceResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&msgs.ApplyServiceResult{")
	s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	s = append(s, "ServiceName: "+fmt.Sprintf("%#v", this.ServiceName)+",\n")
	if this.Pid != nil {
		s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	}
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTypeServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.GetTypeServices{")
	s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTypeServicesResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.GetTypeServicesResult{")
	if this.Pids != nil {
		s = append(s, "Pids: "+fmt.Sprintf("%#v", this.Pids)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UploadService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msgs.UploadService{")
	s = append(s, "ServiceName: "+fmt.Sprintf("%#v", this.ServiceName)+",\n")
	s = append(s, "Load: "+fmt.Sprintf("%#v", this.Load)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.UserLogin{")
	s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSessionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.GetSessionInfo{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSessionInfoByName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.GetSessionInfoByName{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSessionInfoResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msgs.GetSessionInfoResult{")
	if this.UserInfo != nil {
		s = append(s, "UserInfo: "+fmt.Sprintf("%#v", this.UserInfo)+",\n")
	}
	if this.AgentPID != nil {
		s = append(s, "AgentPID: "+fmt.Sprintf("%#v", this.AgentPID)+",\n")
	}
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientDisconnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&msgs.ClientDisconnect{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReceviceClientMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.ReceviceClientMsg{")
	s = append(s, "Rawdata: "+fmt.Sprintf("%#v", this.Rawdata)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserLeave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msgs.UserLeave{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Kick) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.Kick{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerCheckLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msgs.ServerCheckLogin{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.AgentPID != nil {
		s = append(s, "AgentPID: "+fmt.Sprintf("%#v", this.AgentPID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserBindServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.UserBindServer{")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	if this.Pid != nil {
		s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserBaseInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&msgs.UserBaseInfo{")
	s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Lv: "+fmt.Sprintf("%#v", this.Lv)+",\n")
	s = append(s, "Exp: "+fmt.Sprintf("%#v", this.Exp)+",\n")
	s = append(s, "Exptime: "+fmt.Sprintf("%#v", this.Exptime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckLoginResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msgs.CheckLoginResult{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	if this.BaseInfo != nil {
		s = append(s, "BaseInfo: "+fmt.Sprintf("%#v", this.BaseInfo)+",\n")
	}
	if this.BindServers != nil {
		s = append(s, "BindServers: "+fmt.Sprintf("%#v", this.BindServers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreatePlayer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&msgs.CreatePlayer{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.AgentPID != nil {
		s = append(s, "AgentPID: "+fmt.Sprintf("%#v", this.AgentPID)+",\n")
	}
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	if this.GatePID != nil {
		s = append(s, "GatePID: "+fmt.Sprintf("%#v", this.GatePID)+",\n")
	}
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreatePlayerResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&msgs.CreatePlayerResult{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	if this.BaseInfo != nil {
		s = append(s, "BaseInfo: "+fmt.Sprintf("%#v", this.BaseInfo)+",\n")
	}
	if this.PlayerPID != nil {
		s = append(s, "PlayerPID: "+fmt.Sprintf("%#v", this.PlayerPID)+",\n")
	}
	if this.TransData != nil {
		s = append(s, "TransData: "+fmt.Sprintf("%#v", this.TransData)+",\n")
	}
	if this.RoomPID != nil {
		s = append(s, "RoomPID: "+fmt.Sprintf("%#v", this.RoomPID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlayerOutline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.PlayerOutline{")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tick) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&msgs.Tick{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimeFlush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&msgs.TimeFlush{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BattleRoomInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&msgs.BattleRoomInfo{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Boss: "+fmt.Sprintf("%#v", this.Boss)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Hero: "+fmt.Sprintf("%#v", this.Hero)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Equip: "+fmt.Sprintf("%#v", this.Equip)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Lv: "+fmt.Sprintf("%#v", this.Lv)+",\n")
	s = append(s, "Ai: "+fmt.Sprintf("%#v", this.Ai)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLobbyInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&msgs.GetLobbyInfo{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LobbyQueueData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.LobbyQueueData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BattleServerData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msgs.BattleServerData{")
	s = append(s, "Addr: "+fmt.Sprintf("%#v", this.Addr)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLobbyInfoResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.GetLobbyInfoResult{")
	if this.Queuedata != nil {
		s = append(s, "Queuedata: "+fmt.Sprintf("%#v", this.Queuedata)+",\n")
	}
	if this.BattleServerData != nil {
		s = append(s, "BattleServerData: "+fmt.Sprintf("%#v", this.BattleServerData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBattleServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&msgs.GetBattleServer{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Boss: "+fmt.Sprintf("%#v", this.Boss)+",\n")
	s = append(s, "Oppuid: "+fmt.Sprintf("%#v", this.Oppuid)+",\n")
	if this.SelfPID != nil {
		s = append(s, "SelfPID: "+fmt.Sprintf("%#v", this.SelfPID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBattleServerResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msgs.GetBattleServerResult{")
	if this.BattlePID != nil {
		s = append(s, "BattlePID: "+fmt.Sprintf("%#v", this.BattlePID)+",\n")
	}
	s = append(s, "RoomId: "+fmt.Sprintf("%#v", this.RoomId)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinBattleQueue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&msgs.JoinBattleQueue{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "RoomInfo: "+fmt.Sprintf("%#v", this.RoomInfo)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "AiNum: "+fmt.Sprintf("%#v", this.AiNum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinBattleQueueResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.JoinBattleQueueResult{")
	s = append(s, "Waittime: "+fmt.Sprintf("%#v", this.Waittime)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeaveBattleQueue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.LeaveBattleQueue{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MatchBattle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&msgs.MatchBattle{")
	s = append(s, "BattleAddr: "+fmt.Sprintf("%#v", this.BattleAddr)+",\n")
	s = append(s, "RoomId: "+fmt.Sprintf("%#v", this.RoomId)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "RoomInfo: "+fmt.Sprintf("%#v", this.RoomInfo)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	if this.RoomPID != nil {
		s = append(s, "RoomPID: "+fmt.Sprintf("%#v", this.RoomPID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateBattlePlayer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&msgs.CreateBattlePlayer{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Skin: "+fmt.Sprintf("%#v", this.Skin)+",\n")
	if this.AgentPID != nil {
		s = append(s, "AgentPID: "+fmt.Sprintf("%#v", this.AgentPID)+",\n")
	}
	if this.PlayerPID != nil {
		s = append(s, "PlayerPID: "+fmt.Sprintf("%#v", this.PlayerPID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateBattle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&msgs.CreateBattle{")
	s = append(s, "RoomId: "+fmt.Sprintf("%#v", this.RoomId)+",\n")
	s = append(s, "StageId: "+fmt.Sprintf("%#v", this.StageId)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	if this.Players != nil {
		s = append(s, "Players: "+fmt.Sprintf("%#v", this.Players)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateBattleRep) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.CreateBattleRep{")
	if this.RoomPID != nil {
		s = append(s, "RoomPID: "+fmt.Sprintf("%#v", this.RoomPID)+",\n")
	}
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinBattle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.JoinBattle{")
	s = append(s, "RoomId: "+fmt.Sprintf("%#v", this.RoomId)+",\n")
	if this.Player != nil {
		s = append(s, "Player: "+fmt.Sprintf("%#v", this.Player)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AttachBattle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&msgs.AttachBattle{")
	if this.RoomPID != nil {
		s = append(s, "RoomPID: "+fmt.Sprintf("%#v", this.RoomPID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetachBattle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&msgs.DetachBattle{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecoverBattle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.RecoverBattle{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.AgentPID != nil {
		s = append(s, "AgentPID: "+fmt.Sprintf("%#v", this.AgentPID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecoverBattleRep) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&msgs.RecoverBattleRep{")
	if this.RoomPID != nil {
		s = append(s, "RoomPID: "+fmt.Sprintf("%#v", this.RoomPID)+",\n")
	}
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProtos(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CheckLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *HeartBeatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeatMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *C2S_ShopBuyMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ShopBuyMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.ItemId))
	}
	return i, nil
}

func (m *S2C_ShopBuyMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ShopBuyMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.ItemId))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *FrameMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Channel))
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.MsgId))
	}
	if len(m.RawData) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.RawData)))
		i += copy(dAtA[i:], m.RawData)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *FrameMsgJson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameMsgJson) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Channel))
	}
	if len(m.MsgId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.MsgId)))
		i += copy(dAtA[i:], m.MsgId)
	}
	if len(m.RawData) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.RawData)))
		i += copy(dAtA[i:], m.RawData)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *FrameMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameMsgReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frame != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Frame.Size()))
		n1, err := m.Frame.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Cno != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Cno))
	}
	return i, nil
}

func (m *FrameMsgRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameMsgRep) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.ErrCode))
	}
	return i, nil
}

func (m *UnicastFrameMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnicastFrameMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrameMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.FrameMsg.Size()))
		n2, err := m.FrameMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Target != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Target))
	}
	return i, nil
}

func (m *MulticastFrameMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastFrameMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrameMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.FrameMsg.Size()))
		n3, err := m.FrameMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Targets) > 0 {
		dAtA5 := make([]byte, len(m.Targets)*10)
		var j4 int
		for _, num := range m.Targets {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	return i, nil
}

func (m *BroadcastFrameMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastFrameMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrameMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.FrameMsg.Size()))
		n6, err := m.FrameMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *BroadcastFrameMsgJson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastFrameMsgJson) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FrameMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.FrameMsg.Size()))
		n7, err := m.FrameMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *AddAgentToParent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAgentToParent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if m.Sender != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Sender.Size()))
		n8, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *RemoveAgentFromParent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveAgentFromParent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *NewChild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewChild) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *NewChildResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewChildResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Pid.Size()))
		n9, err := m.Pid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *Connect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Connect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Sender.Size()))
		n10, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *Connected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Connected) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *SpawnAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpawnAgent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ServiceValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *AddService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if len(m.ServiceType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ServiceType)))
		i += copy(dAtA[i:], m.ServiceType)
	}
	if m.Pid != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Pid.Size()))
		n11, err := m.Pid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x22
			i++
			i = encodeVarintProtos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AddServiceRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddServiceRep) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *SendOK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendOK) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RemoveService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if len(m.ServiceType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ServiceType)))
		i += copy(dAtA[i:], m.ServiceType)
	}
	return i, nil
}

func (m *ApplyService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ServiceType)))
		i += copy(dAtA[i:], m.ServiceType)
	}
	return i, nil
}

func (m *ApplyServiceResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyServiceResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ServiceType)))
		i += copy(dAtA[i:], m.ServiceType)
	}
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if m.Pid != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Pid.Size()))
		n12, err := m.Pid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x22
			i++
			i = encodeVarintProtos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Result != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *GetTypeServices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTypeServices) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ServiceType)))
		i += copy(dAtA[i:], m.ServiceType)
	}
	return i, nil
}

func (m *GetTypeServicesResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTypeServicesResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pids) > 0 {
		for _, msg := range m.Pids {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProtos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UploadService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if m.Load != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Load))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *UserLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *GetSessionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSessionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *GetSessionInfoByName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSessionInfoByName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GetSessionInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSessionInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.UserInfo.Size()))
		n13, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.AgentPID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.AgentPID.Size()))
		n14, err := m.AgentPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Result != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *ClientDisconnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientDisconnect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReceviceClientMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceviceClientMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rawdata) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Rawdata)))
		i += copy(dAtA[i:], m.Rawdata)
	}
	return i, nil
}

func (m *UserLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if m.From != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.From))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *Kick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *ServerCheckLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerCheckLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.AgentPID != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.AgentPID.Size()))
		n15, err := m.AgentPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *UserBindServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBindServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Channel))
	}
	if m.Pid != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Pid.Size()))
		n16, err := m.Pid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *UserBaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBaseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Lv))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Exp))
	}
	if m.Exptime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Exptime))
	}
	return i, nil
}

func (m *CheckLoginResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckLoginResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Result))
	}
	if m.BaseInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.BaseInfo.Size()))
		n17, err := m.BaseInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.BindServers) > 0 {
		for _, msg := range m.BindServers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintProtos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreatePlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if m.AgentPID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.AgentPID.Size()))
		n18, err := m.AgentPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Sender != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Sender.Size()))
		n19, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.GatePID != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.GatePID.Size()))
		n20, err := m.GatePID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *CreatePlayerResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePlayerResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Result))
	}
	if m.BaseInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.BaseInfo.Size()))
		n21, err := m.BaseInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.PlayerPID != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.PlayerPID.Size()))
		n22, err := m.PlayerPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.TransData != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.TransData.Size()))
		n23, err := m.TransData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.RoomPID != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.RoomPID.Size()))
		n24, err := m.RoomPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *PlayerOutline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerOutline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *Tick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TimeFlush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeFlush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BattleRoomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleRoomInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Rtype))
	}
	if m.Boss != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Boss))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Hero != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Hero))
	}
	if len(m.Card) > 0 {
		for _, s := range m.Card {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Equip) > 0 {
		dAtA26 := make([]byte, len(m.Equip)*10)
		var j25 int
		for _, num1 := range m.Equip {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(j25))
		i += copy(dAtA[i:], dAtA26[:j25])
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Lv != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Lv))
	}
	if m.Ai != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Ai))
	}
	return i, nil
}

func (m *GetLobbyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLobbyInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LobbyQueueData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LobbyQueueData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *BattleServerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleServerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Num))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *GetLobbyInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLobbyInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Queuedata) > 0 {
		for _, msg := range m.Queuedata {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProtos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BattleServerData) > 0 {
		for _, msg := range m.BattleServerData {
			dAtA[i] = 0x12
			i++
			i = encodeVarintProtos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetBattleServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBattleServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Rtype))
	}
	if m.Boss != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Boss))
	}
	if m.Oppuid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Oppuid))
	}
	if m.SelfPID != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.SelfPID.Size()))
		n27, err := m.SelfPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *GetBattleServerResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBattleServerResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BattlePID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.BattlePID.Size()))
		n28, err := m.BattlePID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if len(m.RoomId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.RoomId)))
		i += copy(dAtA[i:], m.RoomId)
	}
	if m.Result != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *JoinBattleQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinBattleQueue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Rtype))
	}
	if len(m.RoomInfo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.RoomInfo)))
		i += copy(dAtA[i:], m.RoomInfo)
	}
	if m.Sender != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Sender.Size()))
		n29, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.AiNum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.AiNum))
	}
	return i, nil
}

func (m *JoinBattleQueueResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinBattleQueueResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Waittime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Waittime))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *LeaveBattleQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveBattleQueue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *MatchBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchBattle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BattleAddr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.BattleAddr)))
		i += copy(dAtA[i:], m.BattleAddr)
	}
	if len(m.RoomId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.RoomId)))
		i += copy(dAtA[i:], m.RoomId)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Rtype))
	}
	if len(m.RoomInfo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.RoomInfo)))
		i += copy(dAtA[i:], m.RoomInfo)
	}
	if m.Result != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Result))
	}
	if m.RoomPID != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.RoomPID.Size()))
		n30, err := m.RoomPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *CreateBattlePlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBattlePlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Skin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Skin))
	}
	if m.AgentPID != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.AgentPID.Size()))
		n31, err := m.AgentPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.PlayerPID != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.PlayerPID.Size()))
		n32, err := m.PlayerPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *CreateBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBattle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.RoomId)))
		i += copy(dAtA[i:], m.RoomId)
	}
	if m.StageId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.StageId))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Rtype))
	}
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x22
			i++
			i = encodeVarintProtos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateBattleRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBattleRep) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomPID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.RoomPID.Size()))
		n33, err := m.RoomPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *JoinBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinBattle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.RoomId)))
		i += copy(dAtA[i:], m.RoomId)
	}
	if m.Player != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Player.Size()))
		n34, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *AttachBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttachBattle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomPID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.RoomPID.Size()))
		n35, err := m.RoomPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *DetachBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetachBattle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RecoverBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoverBattle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Uid))
	}
	if m.AgentPID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.AgentPID.Size()))
		n36, err := m.AgentPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *RecoverBattleRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoverBattleRep) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomPID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.RoomPID.Size()))
		n37, err := m.RoomPID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func encodeFixed64Protos(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Protos(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintProtos(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckLogin) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *HeartBeatMsg) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *C2S_ShopBuyMsg) Size() (n int) {
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovProtos(uint64(m.ItemId))
	}
	return n
}

func (m *S2C_ShopBuyMsg) Size() (n int) {
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovProtos(uint64(m.ItemId))
	}
	if m.Result != 0 {
		n += 1 + sovProtos(uint64(m.Result))
	}
	return n
}

func (m *FrameMsg) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovProtos(uint64(m.Channel))
	}
	if m.MsgId != 0 {
		n += 1 + sovProtos(uint64(m.MsgId))
	}
	l = len(m.RawData)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	return n
}

func (m *FrameMsgJson) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovProtos(uint64(m.Channel))
	}
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.RawData)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	return n
}

func (m *FrameMsgReq) Size() (n int) {
	var l int
	_ = l
	if m.Frame != nil {
		l = m.Frame.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Cno != 0 {
		n += 1 + sovProtos(uint64(m.Cno))
	}
	return n
}

func (m *FrameMsgRep) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovProtos(uint64(m.ErrCode))
	}
	return n
}

func (m *UnicastFrameMsg) Size() (n int) {
	var l int
	_ = l
	if m.FrameMsg != nil {
		l = m.FrameMsg.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Target != 0 {
		n += 1 + sovProtos(uint64(m.Target))
	}
	return n
}

func (m *MulticastFrameMsg) Size() (n int) {
	var l int
	_ = l
	if m.FrameMsg != nil {
		l = m.FrameMsg.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if len(m.Targets) > 0 {
		l = 0
		for _, e := range m.Targets {
			l += sovProtos(uint64(e))
		}
		n += 1 + sovProtos(uint64(l)) + l
	}
	return n
}

func (m *BroadcastFrameMsg) Size() (n int) {
	var l int
	_ = l
	if m.FrameMsg != nil {
		l = m.FrameMsg.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *BroadcastFrameMsgJson) Size() (n int) {
	var l int
	_ = l
	if m.FrameMsg != nil {
		l = m.FrameMsg.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *AddAgentToParent) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *RemoveAgentFromParent) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	return n
}

func (m *NewChild) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *NewChildResult) Size() (n int) {
	var l int
	_ = l
	if m.Pid != nil {
		l = m.Pid.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *Connect) Size() (n int) {
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *Connected) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *SpawnAgent) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ServiceValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *AddService) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.ServiceType)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Pid != nil {
		l = m.Pid.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovProtos(uint64(l))
		}
	}
	return n
}

func (m *AddServiceRep) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovProtos(uint64(m.Result))
	}
	return n
}

func (m *SendOK) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RemoveService) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.ServiceType)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *ApplyService) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceType)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *ApplyServiceResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceType)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Pid != nil {
		l = m.Pid.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovProtos(uint64(l))
		}
	}
	if m.Result != 0 {
		n += 1 + sovProtos(uint64(m.Result))
	}
	return n
}

func (m *GetTypeServices) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceType)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *GetTypeServicesResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Pids) > 0 {
		for _, e := range m.Pids {
			l = e.Size()
			n += 1 + l + sovProtos(uint64(l))
		}
	}
	return n
}

func (m *UploadService) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Load != 0 {
		n += 1 + sovProtos(uint64(m.Load))
	}
	if m.State != 0 {
		n += 1 + sovProtos(uint64(m.State))
	}
	return n
}

func (m *UserLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	return n
}

func (m *GetSessionInfo) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	return n
}

func (m *GetSessionInfoByName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *GetSessionInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.AgentPID != nil {
		l = m.AgentPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovProtos(uint64(m.Result))
	}
	return n
}

func (m *ClientDisconnect) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReceviceClientMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Rawdata)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *UserLeave) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	if m.From != 0 {
		n += 1 + sovProtos(uint64(m.From))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *Kick) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *ServerCheckLogin) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.AgentPID != nil {
		l = m.AgentPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *UserBindServer) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovProtos(uint64(m.Channel))
	}
	if m.Pid != nil {
		l = m.Pid.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *UserBaseInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	if m.Lv != 0 {
		n += 1 + sovProtos(uint64(m.Lv))
	}
	if m.Exp != 0 {
		n += 1 + sovProtos(uint64(m.Exp))
	}
	if m.Exptime != 0 {
		n += 1 + sovProtos(uint64(m.Exptime))
	}
	return n
}

func (m *CheckLoginResult) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovProtos(uint64(m.Result))
	}
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if len(m.BindServers) > 0 {
		for _, e := range m.BindServers {
			l = e.Size()
			n += 1 + l + sovProtos(uint64(l))
		}
	}
	return n
}

func (m *CreatePlayer) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	if m.AgentPID != nil {
		l = m.AgentPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.GatePID != nil {
		l = m.GatePID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *CreatePlayerResult) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovProtos(uint64(m.Result))
	}
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.PlayerPID != nil {
		l = m.PlayerPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.TransData != nil {
		l = m.TransData.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.RoomPID != nil {
		l = m.RoomPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *PlayerOutline) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *Tick) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TimeFlush) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BattleRoomInfo) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	if m.Rtype != 0 {
		n += 1 + sovProtos(uint64(m.Rtype))
	}
	if m.Boss != 0 {
		n += 1 + sovProtos(uint64(m.Boss))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Hero != 0 {
		n += 1 + sovProtos(uint64(m.Hero))
	}
	if len(m.Card) > 0 {
		for _, s := range m.Card {
			l = len(s)
			n += 1 + l + sovProtos(uint64(l))
		}
	}
	if len(m.Equip) > 0 {
		l = 0
		for _, e := range m.Equip {
			l += sovProtos(uint64(e))
		}
		n += 1 + sovProtos(uint64(l)) + l
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Lv != 0 {
		n += 1 + sovProtos(uint64(m.Lv))
	}
	if m.Ai != 0 {
		n += 1 + sovProtos(uint64(m.Ai))
	}
	return n
}

func (m *GetLobbyInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LobbyQueueData) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovProtos(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovProtos(uint64(m.Num))
	}
	return n
}

func (m *BattleServerData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovProtos(uint64(m.Num))
	}
	if m.State != 0 {
		n += 1 + sovProtos(uint64(m.State))
	}
	return n
}

func (m *GetLobbyInfoResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Queuedata) > 0 {
		for _, e := range m.Queuedata {
			l = e.Size()
			n += 1 + l + sovProtos(uint64(l))
		}
	}
	if len(m.BattleServerData) > 0 {
		for _, e := range m.BattleServerData {
			l = e.Size()
			n += 1 + l + sovProtos(uint64(l))
		}
	}
	return n
}

func (m *GetBattleServer) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	if m.Rtype != 0 {
		n += 1 + sovProtos(uint64(m.Rtype))
	}
	if m.Boss != 0 {
		n += 1 + sovProtos(uint64(m.Boss))
	}
	if m.Oppuid != 0 {
		n += 1 + sovProtos(uint64(m.Oppuid))
	}
	if m.SelfPID != nil {
		l = m.SelfPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *GetBattleServerResult) Size() (n int) {
	var l int
	_ = l
	if m.BattlePID != nil {
		l = m.BattlePID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovProtos(uint64(m.Result))
	}
	return n
}

func (m *JoinBattleQueue) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	if m.Rtype != 0 {
		n += 1 + sovProtos(uint64(m.Rtype))
	}
	l = len(m.RoomInfo)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.AiNum != 0 {
		n += 1 + sovProtos(uint64(m.AiNum))
	}
	return n
}

func (m *JoinBattleQueueResult) Size() (n int) {
	var l int
	_ = l
	if m.Waittime != 0 {
		n += 1 + sovProtos(uint64(m.Waittime))
	}
	if m.Result != 0 {
		n += 1 + sovProtos(uint64(m.Result))
	}
	return n
}

func (m *LeaveBattleQueue) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	return n
}

func (m *MatchBattle) Size() (n int) {
	var l int
	_ = l
	l = len(m.BattleAddr)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	if m.Rtype != 0 {
		n += 1 + sovProtos(uint64(m.Rtype))
	}
	l = len(m.RoomInfo)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovProtos(uint64(m.Result))
	}
	if m.RoomPID != nil {
		l = m.RoomPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *CreateBattlePlayer) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Skin != 0 {
		n += 1 + sovProtos(uint64(m.Skin))
	}
	if m.AgentPID != nil {
		l = m.AgentPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.PlayerPID != nil {
		l = m.PlayerPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *CreateBattle) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.StageId != 0 {
		n += 1 + sovProtos(uint64(m.StageId))
	}
	if m.Rtype != 0 {
		n += 1 + sovProtos(uint64(m.Rtype))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovProtos(uint64(l))
		}
	}
	return n
}

func (m *CreateBattleRep) Size() (n int) {
	var l int
	_ = l
	if m.RoomPID != nil {
		l = m.RoomPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovProtos(uint64(m.Result))
	}
	return n
}

func (m *JoinBattle) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *AttachBattle) Size() (n int) {
	var l int
	_ = l
	if m.RoomPID != nil {
		l = m.RoomPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *DetachBattle) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RecoverBattle) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtos(uint64(m.Uid))
	}
	if m.AgentPID != nil {
		l = m.AgentPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *RecoverBattleRep) Size() (n int) {
	var l int
	_ = l
	if m.RoomPID != nil {
		l = m.RoomPID.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovProtos(uint64(m.Result))
	}
	return n
}

func sovProtos(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtos(x uint64) (n int) {
	return sovProtos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CheckLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckLogin{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeartBeatMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeartBeatMsg{`,
		`}`,
	}, "")
	return s
}
func (this *C2S_ShopBuyMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2S_ShopBuyMsg{`,
		`ItemId:` + fmt.Sprintf("%v", this.ItemId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S2C_ShopBuyMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S2C_ShopBuyMsg{`,
		`ItemId:` + fmt.Sprintf("%v", this.ItemId) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrameMsg{`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`MsgId:` + fmt.Sprintf("%v", this.MsgId) + `,`,
		`RawData:` + fmt.Sprintf("%v", this.RawData) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameMsgJson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrameMsgJson{`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`MsgId:` + fmt.Sprintf("%v", this.MsgId) + `,`,
		`RawData:` + fmt.Sprintf("%v", this.RawData) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameMsgReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrameMsgReq{`,
		`Frame:` + strings.Replace(fmt.Sprintf("%v", this.Frame), "FrameMsg", "FrameMsg", 1) + `,`,
		`Cno:` + fmt.Sprintf("%v", this.Cno) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrameMsgRep) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrameMsgRep{`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnicastFrameMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnicastFrameMsg{`,
		`FrameMsg:` + strings.Replace(fmt.Sprintf("%v", this.FrameMsg), "FrameMsg", "FrameMsg", 1) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MulticastFrameMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MulticastFrameMsg{`,
		`FrameMsg:` + strings.Replace(fmt.Sprintf("%v", this.FrameMsg), "FrameMsg", "FrameMsg", 1) + `,`,
		`Targets:` + fmt.Sprintf("%v", this.Targets) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BroadcastFrameMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BroadcastFrameMsg{`,
		`FrameMsg:` + strings.Replace(fmt.Sprintf("%v", this.FrameMsg), "FrameMsg", "FrameMsg", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BroadcastFrameMsgJson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BroadcastFrameMsgJson{`,
		`FrameMsg:` + strings.Replace(fmt.Sprintf("%v", this.FrameMsg), "FrameMsgJson", "FrameMsgJson", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddAgentToParent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddAgentToParent{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveAgentFromParent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveAgentFromParent{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewChild) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewChild{`,
		`}`,
	}, "")
	return s
}
func (this *NewChildResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewChildResult{`,
		`Pid:` + strings.Replace(fmt.Sprintf("%v", this.Pid), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Connect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Connect{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Connected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Connected{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpawnAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpawnAgent{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceValue{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddService{`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`Pid:` + strings.Replace(fmt.Sprintf("%v", this.Pid), "PID", "actor.PID", 1) + `,`,
		`Values:` + strings.Replace(fmt.Sprintf("%v", this.Values), "ServiceValue", "ServiceValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddServiceRep) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddServiceRep{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendOK) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendOK{`,
		`}`,
	}, "")
	return s
}
func (this *RemoveService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveService{`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplyService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplyService{`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplyServiceResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplyServiceResult{`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`Pid:` + strings.Replace(fmt.Sprintf("%v", this.Pid), "PID", "actor.PID", 1) + `,`,
		`Values:` + strings.Replace(fmt.Sprintf("%v", this.Values), "ServiceValue", "ServiceValue", 1) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTypeServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTypeServices{`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTypeServicesResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTypeServicesResult{`,
		`Pids:` + strings.Replace(fmt.Sprintf("%v", this.Pids), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UploadService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UploadService{`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`Load:` + fmt.Sprintf("%v", this.Load) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserLogin{`,
		`Account:` + fmt.Sprintf("%v", this.Account) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSessionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSessionInfo{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSessionInfoByName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSessionInfoByName{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSessionInfoResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSessionInfoResult{`,
		`UserInfo:` + strings.Replace(fmt.Sprintf("%v", this.UserInfo), "UserBaseInfo", "UserBaseInfo", 1) + `,`,
		`AgentPID:` + strings.Replace(fmt.Sprintf("%v", this.AgentPID), "PID", "actor.PID", 1) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientDisconnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientDisconnect{`,
		`}`,
	}, "")
	return s
}
func (this *ReceviceClientMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReceviceClientMsg{`,
		`Rawdata:` + fmt.Sprintf("%v", this.Rawdata) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserLeave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserLeave{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Kick) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Kick{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerCheckLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerCheckLogin{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`AgentPID:` + strings.Replace(fmt.Sprintf("%v", this.AgentPID), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserBindServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserBindServer{`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`Pid:` + strings.Replace(fmt.Sprintf("%v", this.Pid), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserBaseInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserBaseInfo{`,
		`Account:` + fmt.Sprintf("%v", this.Account) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Lv:` + fmt.Sprintf("%v", this.Lv) + `,`,
		`Exp:` + fmt.Sprintf("%v", this.Exp) + `,`,
		`Exptime:` + fmt.Sprintf("%v", this.Exptime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckLoginResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckLoginResult{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`BaseInfo:` + strings.Replace(fmt.Sprintf("%v", this.BaseInfo), "UserBaseInfo", "UserBaseInfo", 1) + `,`,
		`BindServers:` + strings.Replace(fmt.Sprintf("%v", this.BindServers), "UserBindServer", "UserBindServer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePlayer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePlayer{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`AgentPID:` + strings.Replace(fmt.Sprintf("%v", this.AgentPID), "PID", "actor.PID", 1) + `,`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`GatePID:` + strings.Replace(fmt.Sprintf("%v", this.GatePID), "PID", "actor.PID", 1) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePlayerResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePlayerResult{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`BaseInfo:` + strings.Replace(fmt.Sprintf("%v", this.BaseInfo), "UserBaseInfo", "UserBaseInfo", 1) + `,`,
		`PlayerPID:` + strings.Replace(fmt.Sprintf("%v", this.PlayerPID), "PID", "actor.PID", 1) + `,`,
		`TransData:` + strings.Replace(fmt.Sprintf("%v", this.TransData), "CreatePlayer", "CreatePlayer", 1) + `,`,
		`RoomPID:` + strings.Replace(fmt.Sprintf("%v", this.RoomPID), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlayerOutline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlayerOutline{`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tick) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tick{`,
		`}`,
	}, "")
	return s
}
func (this *TimeFlush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimeFlush{`,
		`}`,
	}, "")
	return s
}
func (this *BattleRoomInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BattleRoomInfo{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Boss:` + fmt.Sprintf("%v", this.Boss) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Hero:` + fmt.Sprintf("%v", this.Hero) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Equip:` + fmt.Sprintf("%v", this.Equip) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Lv:` + fmt.Sprintf("%v", this.Lv) + `,`,
		`Ai:` + fmt.Sprintf("%v", this.Ai) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLobbyInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLobbyInfo{`,
		`}`,
	}, "")
	return s
}
func (this *LobbyQueueData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LobbyQueueData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BattleServerData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BattleServerData{`,
		`Addr:` + fmt.Sprintf("%v", this.Addr) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLobbyInfoResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLobbyInfoResult{`,
		`Queuedata:` + strings.Replace(fmt.Sprintf("%v", this.Queuedata), "LobbyQueueData", "LobbyQueueData", 1) + `,`,
		`BattleServerData:` + strings.Replace(fmt.Sprintf("%v", this.BattleServerData), "BattleServerData", "BattleServerData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBattleServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBattleServer{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Boss:` + fmt.Sprintf("%v", this.Boss) + `,`,
		`Oppuid:` + fmt.Sprintf("%v", this.Oppuid) + `,`,
		`SelfPID:` + strings.Replace(fmt.Sprintf("%v", this.SelfPID), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBattleServerResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBattleServerResult{`,
		`BattlePID:` + strings.Replace(fmt.Sprintf("%v", this.BattlePID), "PID", "actor.PID", 1) + `,`,
		`RoomId:` + fmt.Sprintf("%v", this.RoomId) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinBattleQueue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinBattleQueue{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`RoomInfo:` + fmt.Sprintf("%v", this.RoomInfo) + `,`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`AiNum:` + fmt.Sprintf("%v", this.AiNum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinBattleQueueResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinBattleQueueResult{`,
		`Waittime:` + fmt.Sprintf("%v", this.Waittime) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaveBattleQueue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaveBattleQueue{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MatchBattle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchBattle{`,
		`BattleAddr:` + fmt.Sprintf("%v", this.BattleAddr) + `,`,
		`RoomId:` + fmt.Sprintf("%v", this.RoomId) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`RoomInfo:` + fmt.Sprintf("%v", this.RoomInfo) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`RoomPID:` + strings.Replace(fmt.Sprintf("%v", this.RoomPID), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateBattlePlayer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateBattlePlayer{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Skin:` + fmt.Sprintf("%v", this.Skin) + `,`,
		`AgentPID:` + strings.Replace(fmt.Sprintf("%v", this.AgentPID), "PID", "actor.PID", 1) + `,`,
		`PlayerPID:` + strings.Replace(fmt.Sprintf("%v", this.PlayerPID), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateBattle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateBattle{`,
		`RoomId:` + fmt.Sprintf("%v", this.RoomId) + `,`,
		`StageId:` + fmt.Sprintf("%v", this.StageId) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Players:` + strings.Replace(fmt.Sprintf("%v", this.Players), "CreateBattlePlayer", "CreateBattlePlayer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateBattleRep) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateBattleRep{`,
		`RoomPID:` + strings.Replace(fmt.Sprintf("%v", this.RoomPID), "PID", "actor.PID", 1) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinBattle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinBattle{`,
		`RoomId:` + fmt.Sprintf("%v", this.RoomId) + `,`,
		`Player:` + strings.Replace(fmt.Sprintf("%v", this.Player), "CreateBattlePlayer", "CreateBattlePlayer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttachBattle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttachBattle{`,
		`RoomPID:` + strings.Replace(fmt.Sprintf("%v", this.RoomPID), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetachBattle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetachBattle{`,
		`}`,
	}, "")
	return s
}
func (this *RecoverBattle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecoverBattle{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`AgentPID:` + strings.Replace(fmt.Sprintf("%v", this.AgentPID), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecoverBattleRep) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecoverBattleRep{`,
		`RoomPID:` + strings.Replace(fmt.Sprintf("%v", this.RoomPID), "PID", "actor.PID", 1) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProtos(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CheckLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ShopBuyMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ShopBuyMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ShopBuyMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ShopBuyMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ShopBuyMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ShopBuyMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (GAErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (ChannelType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawData = append(m.RawData[:0], dAtA[iNdEx:postIndex]...)
			if m.RawData == nil {
				m.RawData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameMsgJson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameMsgJson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameMsgJson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (ChannelType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawData = append(m.RawData[:0], dAtA[iNdEx:postIndex]...)
			if m.RawData == nil {
				m.RawData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Frame == nil {
				m.Frame = &FrameMsg{}
			}
			if err := m.Frame.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cno", wireType)
			}
			m.Cno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cno |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameMsgRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameMsgRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameMsgRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (GAErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnicastFrameMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnicastFrameMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnicastFrameMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrameMsg == nil {
				m.FrameMsg = &FrameMsg{}
			}
			if err := m.FrameMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastFrameMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastFrameMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastFrameMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrameMsg == nil {
				m.FrameMsg = &FrameMsg{}
			}
			if err := m.FrameMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Targets = append(m.Targets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtos
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Targets = append(m.Targets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastFrameMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastFrameMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastFrameMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrameMsg == nil {
				m.FrameMsg = &FrameMsg{}
			}
			if err := m.FrameMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastFrameMsgJson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastFrameMsgJson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastFrameMsgJson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrameMsg == nil {
				m.FrameMsg = &FrameMsgJson{}
			}
			if err := m.FrameMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAgentToParent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAgentToParent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAgentToParent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveAgentFromParent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveAgentFromParent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveAgentFromParent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewChild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewChild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewChild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewChildResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewChildResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewChildResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pid == nil {
				m.Pid = &actor.PID{}
			}
			if err := m.Pid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Connect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Connect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Connect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Connected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Connected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Connected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpawnAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpawnAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpawnAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pid == nil {
				m.Pid = &actor.PID{}
			}
			if err := m.Pid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &ServiceValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddServiceRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddServiceRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddServiceRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (GAErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendOK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendOK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendOK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyServiceResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyServiceResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyServiceResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pid == nil {
				m.Pid = &actor.PID{}
			}
			if err := m.Pid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &ServiceValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (GAErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTypeServices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTypeServices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTypeServices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTypeServicesResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTypeServicesResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTypeServicesResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pids = append(m.Pids, &actor.PID{})
			if err := m.Pids[len(m.Pids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			m.Load = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Load |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ServiceState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSessionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSessionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSessionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSessionInfoByName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSessionInfoByName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSessionInfoByName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSessionInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSessionInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSessionInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &UserBaseInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentPID == nil {
				m.AgentPID = &actor.PID{}
			}
			if err := m.AgentPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (GAErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientDisconnect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientDisconnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientDisconnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceviceClientMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceviceClientMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceviceClientMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rawdata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rawdata = append(m.Rawdata[:0], dAtA[iNdEx:postIndex]...)
			if m.Rawdata == nil {
				m.Rawdata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (ServerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Kick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Kick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Kick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerCheckLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerCheckLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerCheckLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentPID == nil {
				m.AgentPID = &actor.PID{}
			}
			if err := m.AgentPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserBindServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBindServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBindServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (ChannelType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pid == nil {
				m.Pid = &actor.PID{}
			}
			if err := m.Pid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserBaseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exptime", wireType)
			}
			m.Exptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exptime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckLoginResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckLoginResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckLoginResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (GAErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &UserBaseInfo{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindServers = append(m.BindServers, &UserBindServer{})
			if err := m.BindServers[len(m.BindServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentPID == nil {
				m.AgentPID = &actor.PID{}
			}
			if err := m.AgentPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatePID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatePID == nil {
				m.GatePID = &actor.PID{}
			}
			if err := m.GatePID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePlayerResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePlayerResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePlayerResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (GAErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &UserBaseInfo{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerPID == nil {
				m.PlayerPID = &actor.PID{}
			}
			if err := m.PlayerPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransData == nil {
				m.TransData = &CreatePlayer{}
			}
			if err := m.TransData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomPID == nil {
				m.RoomPID = &actor.PID{}
			}
			if err := m.RoomPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerOutline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerOutline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerOutline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeFlush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeFlush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeFlush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleRoomInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleRoomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleRoomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boss", wireType)
			}
			m.Boss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Boss |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			m.Hero = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hero |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Card = append(m.Card, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Equip = append(m.Equip, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtos
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Equip = append(m.Equip, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Equip", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ai", wireType)
			}
			m.Ai = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ai |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLobbyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLobbyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLobbyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LobbyQueueData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LobbyQueueData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LobbyQueueData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleServerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleServerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleServerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLobbyInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLobbyInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLobbyInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queuedata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queuedata = append(m.Queuedata, &LobbyQueueData{})
			if err := m.Queuedata[len(m.Queuedata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BattleServerData = append(m.BattleServerData, &BattleServerData{})
			if err := m.BattleServerData[len(m.BattleServerData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBattleServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBattleServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBattleServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boss", wireType)
			}
			m.Boss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Boss |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oppuid", wireType)
			}
			m.Oppuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oppuid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfPID == nil {
				m.SelfPID = &actor.PID{}
			}
			if err := m.SelfPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBattleServerResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBattleServerResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBattleServerResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattlePID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BattlePID == nil {
				m.BattlePID = &actor.PID{}
			}
			if err := m.BattlePID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (GAErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinBattleQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinBattleQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinBattleQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomInfo = append(m.RoomInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.RoomInfo == nil {
				m.RoomInfo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiNum", wireType)
			}
			m.AiNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AiNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinBattleQueueResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinBattleQueueResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinBattleQueueResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waittime", wireType)
			}
			m.Waittime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Waittime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (GAErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveBattleQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveBattleQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveBattleQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BattleAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomInfo = append(m.RoomInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.RoomInfo == nil {
				m.RoomInfo = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (GAErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomPID == nil {
				m.RoomPID = &actor.PID{}
			}
			if err := m.RoomPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBattlePlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBattlePlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBattlePlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skin", wireType)
			}
			m.Skin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentPID == nil {
				m.AgentPID = &actor.PID{}
			}
			if err := m.AgentPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerPID == nil {
				m.PlayerPID = &actor.PID{}
			}
			if err := m.PlayerPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &CreateBattlePlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBattleRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBattleRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBattleRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomPID == nil {
				m.RoomPID = &actor.PID{}
			}
			if err := m.RoomPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (GAErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &CreateBattlePlayer{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttachBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttachBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttachBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomPID == nil {
				m.RoomPID = &actor.PID{}
			}
			if err := m.RoomPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetachBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetachBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetachBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecoverBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoverBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoverBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentPID == nil {
				m.AgentPID = &actor.PID{}
			}
			if err := m.AgentPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecoverBattleRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoverBattleRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoverBattleRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomPID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomPID == nil {
				m.RoomPID = &actor.PID{}
			}
			if err := m.RoomPID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (GAErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProtos
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtos
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtos(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtos = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtos   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protos.proto", fileDescriptorProtos) }

var fileDescriptorProtos = []byte{
	// 1892 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4d, 0x6f, 0x1b, 0xc7,
	0xf9, 0xd7, 0x92, 0xcb, 0xb7, 0x87, 0x14, 0x45, 0x2f, 0x64, 0x83, 0x7f, 0xe3, 0x0f, 0x42, 0x18,
	0xb8, 0xad, 0xa2, 0xd6, 0xb4, 0xa0, 0x14, 0x0e, 0x90, 0x4b, 0x21, 0x52, 0x91, 0xa2, 0x38, 0x72,
	0xdc, 0xa5, 0x1c, 0xa0, 0x08, 0x90, 0x62, 0xb8, 0x3b, 0x22, 0x17, 0x5a, 0xee, 0xac, 0x77, 0x86,
	0x52, 0x78, 0x28, 0xd0, 0x43, 0x4f, 0x6d, 0x81, 0xf6, 0xda, 0x9e, 0x7a, 0x68, 0x81, 0x7e, 0x94,
	0x5e, 0x0a, 0xf8, 0x58, 0xf4, 0x54, 0xab, 0x97, 0x1e, 0xd3, 0x6f, 0x50, 0xcc, 0xcb, 0xee, 0x0e,
	0x45, 0xd2, 0x92, 0x9c, 0xe4, 0xc4, 0x79, 0x66, 0x9e, 0xd7, 0xdf, 0x3c, 0x2f, 0xb3, 0x84, 0x46,
	0x9c, 0x50, 0x4e, 0x59, 0x57, 0xfe, 0x38, 0xf6, 0x84, 0x8d, 0xd8, 0xc3, 0xa7, 0xa3, 0x80, 0x8f,
	0xa7, 0xc3, 0xae, 0x47, 0x27, 0x4f, 0xf6, 0xd9, 0x2c, 0x3a, 0x4f, 0x68, 0x74, 0x7c, 0xfa, 0x44,
	0xb2, 0x60, 0x8f, 0xd3, 0xe4, 0xf1, 0x88, 0x3e, 0x91, 0x8b, 0x27, 0xa6, 0xf4, 0xc3, 0x3a, 0x1b,
	0xe3, 0x84, 0x28, 0x02, 0xed, 0x02, 0xf4, 0xc7, 0xc4, 0x3b, 0xff, 0x94, 0x8e, 0x82, 0xc8, 0x69,
	0x41, 0x71, 0x1a, 0xf8, 0x6d, 0x6b, 0xcb, 0xda, 0xb6, 0x5d, 0xb1, 0x14, 0x3b, 0xe7, 0x64, 0xd6,
	0x2e, 0x6c, 0x59, 0xdb, 0x35, 0x57, 0x2c, 0x51, 0x13, 0x1a, 0x1f, 0x13, 0x9c, 0xf0, 0x1e, 0xc1,
	0xfc, 0x84, 0x8d, 0xd0, 0x36, 0x34, 0xfb, 0x7b, 0x83, 0x9f, 0x0f, 0xc6, 0x34, 0xee, 0x4d, 0x67,
	0x27, 0x6c, 0xe4, 0x3c, 0x80, 0x72, 0xc0, 0xc9, 0xe4, 0x58, 0x29, 0x5a, 0x77, 0x35, 0x85, 0x06,
	0xd0, 0x1c, 0xec, 0xf5, 0x6f, 0xc1, 0xe9, 0xbc, 0x07, 0xe5, 0x84, 0xb0, 0x69, 0xc8, 0xa5, 0xe1,
	0xe6, 0xde, 0xbd, 0xae, 0x88, 0xb8, 0x7b, 0xb4, 0xff, 0x51, 0x92, 0xd0, 0xa4, 0x4f, 0x7d, 0xe2,
	0x6a, 0x06, 0x34, 0x83, 0xea, 0x61, 0x82, 0x27, 0x44, 0xa8, 0xfb, 0x21, 0x54, 0xbc, 0x31, 0x8e,
	0x22, 0x12, 0x4a, 0x7d, 0x99, 0x5c, 0x5f, 0x6d, 0x9e, 0xce, 0x62, 0xe2, 0xa6, 0x1c, 0xce, 0x26,
	0x94, 0x26, 0x6c, 0x74, 0xec, 0x4b, 0x13, 0xeb, 0xae, 0x22, 0x9c, 0x36, 0x54, 0x12, 0x7c, 0x79,
	0x80, 0x39, 0x6e, 0x17, 0xb7, 0xac, 0xed, 0x86, 0x9b, 0x92, 0x29, 0x36, 0x76, 0x86, 0x0d, 0xfa,
	0x05, 0x34, 0x52, 0xd3, 0x9f, 0x30, 0x1a, 0x7d, 0x03, 0xf3, 0xb5, 0x77, 0x31, 0xff, 0x11, 0xd4,
	0x53, 0xf3, 0x2e, 0x79, 0xe5, 0x3c, 0x82, 0xd2, 0x99, 0x20, 0xa5, 0xed, 0xfa, 0x5e, 0x53, 0xd9,
	0xce, 0x38, 0xd4, 0xa1, 0x50, 0xe3, 0x45, 0x54, 0xc7, 0x2c, 0x96, 0xe8, 0x43, 0x53, 0x4d, 0x2c,
	0x82, 0x20, 0x89, 0x84, 0x78, 0x3e, 0x08, 0x13, 0xfb, 0x94, 0x03, 0xbd, 0x84, 0x8d, 0x97, 0x51,
	0xe0, 0x61, 0xc6, 0xb3, 0x3b, 0xd8, 0x81, 0xea, 0x99, 0x5e, 0xaf, 0xf0, 0x24, 0x3b, 0x17, 0xd7,
	0xcf, 0x71, 0x32, 0x22, 0xea, 0x9a, 0x6d, 0x57, 0x53, 0xe8, 0x67, 0x70, 0xef, 0x64, 0x1a, 0xf2,
	0x77, 0x57, 0xdc, 0x86, 0x8a, 0x52, 0xc5, 0xda, 0x85, 0xad, 0xe2, 0xb6, 0xed, 0xa6, 0x24, 0xfa,
	0x09, 0xdc, 0xeb, 0x25, 0x14, 0xfb, 0xef, 0xaa, 0x1a, 0x1d, 0xc1, 0xfd, 0x05, 0x05, 0xf2, 0xf6,
	0xbb, 0x0b, 0x4a, 0x9c, 0x79, 0x25, 0x82, 0xcb, 0x50, 0xf4, 0x31, 0xb4, 0xf6, 0x7d, 0x7f, 0x7f,
	0x44, 0x22, 0x7e, 0x4a, 0x5f, 0xe0, 0x84, 0x44, 0x7c, 0x49, 0xfd, 0x21, 0x28, 0x33, 0x12, 0xf9,
	0x24, 0x91, 0x10, 0xd5, 0xf7, 0xa0, 0x2b, 0x2b, 0xba, 0xfb, 0xe2, 0xf8, 0xc0, 0xd5, 0x27, 0xe8,
	0x3d, 0xb8, 0xef, 0x92, 0x09, 0xbd, 0x20, 0x52, 0xd9, 0x61, 0x42, 0x27, 0xab, 0xd4, 0x21, 0x80,
	0xea, 0x73, 0x72, 0xd9, 0x1f, 0x07, 0xa1, 0x8f, 0xba, 0xd0, 0x4c, 0xd7, 0xae, 0xac, 0x25, 0xe7,
	0xff, 0xa1, 0x18, 0x6b, 0xfe, 0x79, 0x4b, 0x62, 0x1b, 0x3d, 0x86, 0x4a, 0x9f, 0x46, 0x11, 0xf1,
	0xb8, 0xf0, 0x6a, 0xa0, 0xbc, 0xb2, 0x56, 0x7a, 0xf5, 0x3d, 0xa8, 0x69, 0x76, 0x22, 0xf3, 0xfa,
	0x84, 0x30, 0x86, 0x47, 0x2a, 0xab, 0x6a, 0x6e, 0x65, 0xa2, 0x48, 0xd4, 0x00, 0x18, 0xc4, 0xf8,
	0x32, 0x92, 0xbe, 0xa3, 0xa7, 0xd0, 0x18, 0x90, 0xe4, 0x22, 0xf0, 0xc8, 0xe7, 0x38, 0x9c, 0xca,
	0x74, 0x7d, 0x46, 0x66, 0x5a, 0x46, 0xb4, 0x1f, 0x51, 0x37, 0xf2, 0x28, 0xad, 0x9b, 0x0b, 0x41,
	0xa0, 0x3f, 0x5a, 0x00, 0xfb, 0xbe, 0xaf, 0x65, 0x9d, 0x2d, 0xa8, 0x33, 0xb5, 0x7c, 0x9e, 0x56,
	0x44, 0xcd, 0x35, 0xb7, 0x0c, 0x0e, 0x51, 0x96, 0x5a, 0x99, 0xb9, 0x95, 0x82, 0x51, 0x5c, 0x0a,
	0x86, 0xb3, 0x03, 0x65, 0x69, 0x99, 0xb5, 0xed, 0xad, 0x62, 0x7e, 0xd7, 0xa6, 0xf3, 0xae, 0xe6,
	0x40, 0x1f, 0xc2, 0x7a, 0xee, 0x9b, 0xa8, 0xb1, 0xbc, 0xbd, 0x59, 0x37, 0xb5, 0xb7, 0xaa, 0x42,
	0xfa, 0xb3, 0x67, 0x68, 0x00, 0xeb, 0xea, 0x96, 0xbf, 0xc5, 0x20, 0xd1, 0x2e, 0x34, 0xf6, 0xe3,
	0x38, 0x9c, 0x2d, 0xea, 0x94, 0x12, 0xd6, 0xa2, 0xc4, 0xdf, 0x2d, 0x70, 0x4c, 0x11, 0x9d, 0x3a,
	0x37, 0x0a, 0x5e, 0x77, 0xb7, 0xb0, 0xe8, 0xee, 0xb7, 0x86, 0xb8, 0x01, 0x70, 0xe9, 0x26, 0x80,
	0xdf, 0x87, 0x8d, 0x23, 0xc2, 0x85, 0x87, 0x5a, 0x13, 0xbb, 0x05, 0x08, 0x1f, 0xc0, 0xfd, 0x6b,
	0x42, 0x1a, 0x86, 0x0e, 0xd8, 0x71, 0xe0, 0xb3, 0xb6, 0x25, 0x5d, 0x34, 0x63, 0x90, 0xfb, 0x88,
	0xc2, 0xfa, 0xcb, 0x38, 0xa4, 0xf8, 0x0e, 0x99, 0xea, 0x80, 0x2d, 0x04, 0x74, 0xcb, 0x96, 0x6b,
	0x67, 0x1b, 0x4a, 0x8c, 0x63, 0x4e, 0x24, 0x56, 0xcd, 0x6b, 0x50, 0x0c, 0xc4, 0x89, 0xab, 0x18,
	0xd0, 0x07, 0x50, 0x7b, 0xc9, 0x48, 0xa2, 0xc6, 0x7b, 0x1b, 0x2a, 0xd8, 0xf3, 0xe8, 0x34, 0xe2,
	0x69, 0x15, 0x6a, 0x32, 0xed, 0x14, 0x85, 0xbc, 0x53, 0x20, 0x68, 0x1e, 0x11, 0x3e, 0x20, 0x8c,
	0x05, 0x34, 0x3a, 0x8e, 0xce, 0xe8, 0x92, 0x6e, 0xb2, 0x03, 0x9b, 0xf3, 0x3c, 0xbd, 0x59, 0xea,
	0x72, 0x94, 0x47, 0x23, 0xd7, 0xe8, 0x0f, 0xd6, 0x75, 0x66, 0x0d, 0x59, 0x17, 0xaa, 0x53, 0x46,
	0x12, 0xb1, 0x33, 0xdf, 0x37, 0x85, 0xdf, 0x3d, 0xcc, 0x88, 0xe4, 0xcd, 0x78, 0x9c, 0xef, 0x43,
	0x15, 0x8b, 0x5e, 0xf1, 0xe2, 0xf8, 0x60, 0x49, 0x4f, 0xcc, 0xce, 0x8c, 0x1c, 0x28, 0xde, 0x94,
	0x03, 0x0e, 0xb4, 0xfa, 0x61, 0x40, 0x22, 0x7e, 0x10, 0x30, 0x4f, 0xf5, 0x2c, 0xf4, 0x18, 0xee,
	0xb9, 0xc4, 0x23, 0x02, 0x50, 0x75, 0xa6, 0xe7, 0x4a, 0x82, 0x2f, 0x7d, 0x31, 0x9e, 0xad, 0x6c,
	0x3c, 0x0b, 0x12, 0x7d, 0xa1, 0x71, 0x26, 0xf8, 0x82, 0x2c, 0x69, 0xe3, 0x8f, 0xc0, 0x3e, 0x4b,
	0xe8, 0x44, 0x3f, 0x67, 0x5a, 0xf9, 0x7d, 0x91, 0x44, 0x3e, 0x0b, 0xe4, 0xa9, 0x98, 0x87, 0x09,
	0xc1, 0x8c, 0x46, 0xd2, 0xe5, 0x9a, 0xab, 0x29, 0xb4, 0x0b, 0xf6, 0xb3, 0xc0, 0x3b, 0x5f, 0xa2,
	0x37, 0x97, 0x28, 0xcc, 0x49, 0x7c, 0x09, 0x2d, 0xa5, 0xfd, 0x6e, 0x8f, 0xbb, 0x39, 0x70, 0x8b,
	0xab, 0xc1, 0x45, 0x5f, 0x40, 0x53, 0x5e, 0x4f, 0x10, 0xf9, 0xca, 0xce, 0xdd, 0x1e, 0x3f, 0xba,
	0xd2, 0x0b, 0xcb, 0x07, 0xcd, 0xaf, 0x2d, 0x68, 0x98, 0x97, 0xff, 0x96, 0xbc, 0x4d, 0x33, 0xad,
	0x90, 0x67, 0x5a, 0x1a, 0x67, 0x31, 0x8f, 0xb3, 0x09, 0x85, 0xf0, 0x42, 0x3f, 0x9d, 0x0a, 0xe1,
	0x85, 0xe0, 0x20, 0x5f, 0xc5, 0xb2, 0x37, 0xd8, 0xae, 0x58, 0x0a, 0x0b, 0xe4, 0xab, 0x98, 0x07,
	0x13, 0xd2, 0x2e, 0xcb, 0xdd, 0x94, 0x44, 0x7f, 0xb1, 0xa0, 0x95, 0x83, 0xa8, 0x73, 0xf6, 0xf6,
	0x0d, 0x5c, 0xa4, 0xf7, 0x50, 0xc7, 0xa1, 0xe3, 0x5d, 0x9a, 0xde, 0x29, 0x8f, 0xf3, 0x14, 0xea,
	0xc3, 0x0c, 0x55, 0xd6, 0x2e, 0xca, 0x46, 0xb2, 0x69, 0x88, 0x64, 0x87, 0xae, 0xc9, 0x88, 0xfe,
	0x6c, 0x41, 0xa3, 0x9f, 0x10, 0xcc, 0xc9, 0x8b, 0x10, 0xcf, 0x48, 0xb2, 0xe4, 0xba, 0x6f, 0x5b,
	0x39, 0xf9, 0x9b, 0xa3, 0xb8, 0x6a, 0xba, 0x3b, 0x8f, 0xa0, 0x32, 0x12, 0xb6, 0x8e, 0x0f, 0x24,
	0xae, 0xf3, 0x4c, 0xe9, 0x51, 0x9a, 0x60, 0xa5, 0xfc, 0xeb, 0xe1, 0xbf, 0x16, 0x38, 0xa6, 0x9b,
	0xdf, 0x3d, 0xa0, 0xdb, 0x50, 0x8b, 0xa5, 0xa9, 0xe5, 0x39, 0x9d, 0x1f, 0x3a, 0xbb, 0x50, 0xe3,
	0x09, 0x8e, 0x98, 0x7c, 0x7e, 0xdb, 0xa6, 0xea, 0x39, 0x8f, 0x73, 0x26, 0x81, 0x42, 0x42, 0xe9,
	0x44, 0x68, 0x2e, 0x2d, 0xa2, 0xa0, 0x8f, 0xd0, 0x0f, 0x60, 0x5d, 0x89, 0x7e, 0x36, 0xe5, 0x61,
	0x10, 0x11, 0xa3, 0x6a, 0xad, 0xb9, 0xaa, 0x2d, 0x83, 0x7d, 0x1a, 0x78, 0xe7, 0xa8, 0x0e, 0xb5,
	0xd3, 0x60, 0x42, 0x0e, 0xc3, 0x29, 0x1b, 0xa3, 0xd7, 0x16, 0x34, 0x7b, 0x98, 0xf3, 0x90, 0xb8,
	0x94, 0x4e, 0x96, 0x77, 0x62, 0xf1, 0x2a, 0x4a, 0x78, 0x3a, 0xe3, 0x4b, 0xae, 0x22, 0x44, 0x75,
	0x0c, 0x29, 0x63, 0x32, 0xea, 0x92, 0x2b, 0xd7, 0xe9, 0x95, 0xd8, 0x79, 0xcd, 0x3b, 0x60, 0x8f,
	0x49, 0x42, 0x65, 0x04, 0x25, 0x57, 0xae, 0xc5, 0x9e, 0x87, 0x13, 0xbf, 0x5d, 0xde, 0x2a, 0x8a,
	0xba, 0x12, 0x6b, 0x61, 0x83, 0xbc, 0x9a, 0x06, 0x71, 0xbb, 0xb2, 0x55, 0x14, 0x36, 0x24, 0x91,
	0x55, 0x60, 0xd5, 0xa8, 0x40, 0x55, 0x6f, 0x35, 0xa9, 0x4f, 0xd4, 0x5b, 0x13, 0x0a, 0x38, 0x68,
	0x83, 0xa2, 0x71, 0x20, 0x3e, 0x21, 0x8f, 0x08, 0xff, 0x94, 0x0e, 0x87, 0x33, 0x11, 0x0f, 0x7a,
	0x0a, 0x4d, 0x49, 0xfc, 0x74, 0x4a, 0xa6, 0x44, 0x02, 0xeb, 0x80, 0xcd, 0xd3, 0xd9, 0x5b, 0x72,
	0xe5, 0x5a, 0x78, 0x1e, 0x4d, 0x27, 0x3a, 0x42, 0xb1, 0x44, 0xcf, 0xa1, 0xa5, 0x90, 0x51, 0x45,
	0x90, 0x4a, 0x62, 0xdf, 0x4f, 0xd2, 0xd9, 0x23, 0xd6, 0x8b, 0x92, 0x22, 0x96, 0x7c, 0x80, 0x96,
	0xd2, 0x61, 0xf9, 0x5b, 0x0b, 0x1c, 0xd3, 0x31, 0x9d, 0x9c, 0x7b, 0x50, 0x7b, 0x25, 0x3c, 0xd3,
	0x7d, 0xdf, 0x28, 0xc8, 0x79, 0xaf, 0xdd, 0x9c, 0xcd, 0xe9, 0x41, 0x6b, 0x78, 0xcd, 0x35, 0xf9,
	0x29, 0x52, 0xdf, 0x7b, 0xa0, 0x44, 0xaf, 0x3b, 0xee, 0x2e, 0xf0, 0xa3, 0xdf, 0x58, 0xf2, 0x6d,
	0x62, 0x72, 0x7e, 0xa3, 0xab, 0x7f, 0x00, 0x65, 0x1a, 0xc7, 0xf9, 0x57, 0xa4, 0xa6, 0x44, 0x16,
	0x33, 0x12, 0x9e, 0xad, 0xc8, 0x62, 0x7d, 0x84, 0x7e, 0x65, 0xc9, 0x47, 0x8f, 0xe9, 0x8d, 0xc6,
	0x67, 0x1b, 0x6a, 0xca, 0x77, 0xa1, 0x61, 0xf1, 0x83, 0x20, 0x3f, 0x94, 0x89, 0x2f, 0x92, 0xd8,
	0xcf, 0xc6, 0x95, 0xa4, 0xee, 0x32, 0xab, 0x7f, 0x67, 0xc1, 0xc6, 0x27, 0x34, 0x88, 0x94, 0x1f,
	0x12, 0xfb, 0x5b, 0x83, 0xf2, 0x10, 0xaa, 0x89, 0xae, 0x21, 0xfd, 0x79, 0x9d, 0xd1, 0x46, 0xd3,
	0xb3, 0x57, 0x36, 0xbd, 0x4d, 0x28, 0xe1, 0xe0, 0xf9, 0x74, 0xa2, 0x4b, 0x45, 0x11, 0xe8, 0x4b,
	0xb8, 0x7f, 0xcd, 0x21, 0x8d, 0xcb, 0x43, 0xa8, 0x5e, 0xe2, 0x80, 0xcb, 0xa9, 0xa2, 0x7c, 0xcb,
	0xe8, 0xbb, 0xfc, 0xc3, 0xf1, 0x08, 0x5a, 0xf2, 0x59, 0xf1, 0xd6, 0x88, 0xd1, 0x3f, 0x2d, 0xa8,
	0x9f, 0x60, 0xee, 0x8d, 0x15, 0x9b, 0xd3, 0x01, 0x50, 0xb8, 0xef, 0xe7, 0xd5, 0x60, 0xec, 0xac,
	0xbc, 0x8a, 0xc5, 0xe9, 0x99, 0x61, 0x69, 0xaf, 0xc2, 0xb2, 0x74, 0x0d, 0xcb, 0x3c, 0xb8, 0xf2,
	0x4d, 0xdd, 0xdc, 0xe8, 0xa0, 0x95, 0xd5, 0x1d, 0xf4, 0x4f, 0xd9, 0xd4, 0x50, 0xd1, 0xad, 0x1c,
	0x71, 0xcb, 0xde, 0x03, 0x0e, 0xd8, 0xec, 0x3c, 0x88, 0xd2, 0x52, 0x10, 0xeb, 0xb9, 0x51, 0x68,
	0xbf, 0x65, 0x14, 0xce, 0x0d, 0x8f, 0xd2, 0x5b, 0x86, 0x87, 0x7c, 0xb4, 0x98, 0x2e, 0x1a, 0x00,
	0x5b, 0x73, 0x00, 0xb7, 0xa1, 0xc2, 0x38, 0x1e, 0x11, 0x8d, 0x7c, 0xc9, 0x4d, 0xc9, 0x1c, 0xe8,
	0xa2, 0x09, 0xf4, 0x1e, 0x54, 0x94, 0x95, 0xf4, 0xc3, 0xa7, 0x6d, 0xce, 0x24, 0x13, 0x0f, 0x37,
	0x65, 0x44, 0x43, 0xd8, 0x30, 0x8f, 0xc5, 0x37, 0xa7, 0x01, 0xb4, 0xb5, 0x12, 0xe8, 0xbb, 0xa4,
	0xe5, 0xe7, 0x00, 0x79, 0xda, 0xaf, 0x8c, 0x76, 0x17, 0xca, 0xca, 0x29, 0x3d, 0xab, 0x57, 0x3b,
	0xaf, 0xf9, 0xd0, 0x8f, 0xa1, 0xb1, 0xcf, 0x39, 0xce, 0x12, 0xf9, 0x56, 0x8e, 0x8b, 0x91, 0x72,
	0x40, 0x72, 0x29, 0x74, 0x2c, 0xbe, 0x96, 0x3d, 0x7a, 0x21, 0x9e, 0x04, 0x52, 0xcd, 0x3b, 0x3f,
	0x87, 0x90, 0x07, 0xad, 0x39, 0x55, 0xdf, 0x05, 0x9a, 0x3b, 0x03, 0xa8, 0x0f, 0xc6, 0x34, 0x3e,
	0x61, 0x23, 0xf9, 0xb1, 0xbc, 0x01, 0x75, 0xe3, 0x4f, 0xd5, 0xd6, 0x9a, 0xd8, 0x30, 0xfe, 0x3b,
	0x6d, 0x59, 0x4e, 0x0b, 0x1a, 0x29, 0xc7, 0x80, 0x84, 0x61, 0xab, 0x20, 0x76, 0x52, 0x16, 0xb9,
	0x53, 0xdc, 0xf9, 0x3f, 0x80, 0x1e, 0x1e, 0xa5, 0x3a, 0xeb, 0x50, 0x11, 0xe7, 0x3d, 0x3c, 0x6a,
	0xad, 0xed, 0x1c, 0x66, 0x7f, 0xb4, 0xc8, 0xcf, 0x45, 0x67, 0x53, 0x7d, 0x30, 0xa4, 0xf4, 0x61,
	0x42, 0x88, 0xb6, 0xaa, 0x76, 0x0f, 0xa7, 0x61, 0xd8, 0xb2, 0x8c, 0x8d, 0x01, 0xa7, 0x71, 0xab,
	0xd0, 0xfb, 0xd1, 0xeb, 0x37, 0x9d, 0xb5, 0x7f, 0xbc, 0xe9, 0xac, 0x7d, 0xfd, 0xa6, 0x63, 0xfd,
	0xf2, 0xaa, 0x63, 0xfd, 0xf5, 0xaa, 0x63, 0xfd, 0xed, 0xaa, 0x63, 0xbd, 0xbe, 0xea, 0x58, 0xff,
	0xba, 0xea, 0x58, 0xff, 0xb9, 0xea, 0xac, 0x7d, 0x7d, 0xd5, 0xb1, 0x7e, 0xff, 0xef, 0xce, 0xda,
	0xb0, 0x2c, 0xff, 0x74, 0x7e, 0xff, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x26, 0x18, 0xb5,
	0xcf, 0x16, 0x00, 0x00,
}
