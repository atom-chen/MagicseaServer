// Code generated by protoc-gen-gogo.
// source: share.proto
// DO NOT EDIT!

package msgs

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 错误类型
type GAErrorCode int32

const (
	OK            GAErrorCode = 0
	Fail          GAErrorCode = 1
	Error         GAErrorCode = 2
	ServerFull    GAErrorCode = 3
	KeyError      GAErrorCode = 4
	NoFoundTarget GAErrorCode = 5
	// old code
	IMPORTANT_WRONG_HEAD      GAErrorCode = -1000
	RESOURCE_VITALITY_ERROR   GAErrorCode = 1002
	RESOURCE_GOLD_ERROR       GAErrorCode = 1003
	RESOURCE_RMB_ERROR        GAErrorCode = 1004
	GUILD_EXIT_CHAIRMAN_ERROR GAErrorCode = 1022
	UNKNOWN_ERROR             GAErrorCode = -9999
)

var GAErrorCode_name = map[int32]string{
	0:     "OK",
	1:     "Fail",
	2:     "Error",
	3:     "ServerFull",
	4:     "KeyError",
	5:     "NoFoundTarget",
	-1000: "IMPORTANT_WRONG_HEAD",
	1002:  "RESOURCE_VITALITY_ERROR",
	1003:  "RESOURCE_GOLD_ERROR",
	1004:  "RESOURCE_RMB_ERROR",
	1022:  "GUILD_EXIT_CHAIRMAN_ERROR",
	-9999: "UNKNOWN_ERROR",
}
var GAErrorCode_value = map[string]int32{
	"OK":                        0,
	"Fail":                      1,
	"Error":                     2,
	"ServerFull":                3,
	"KeyError":                  4,
	"NoFoundTarget":             5,
	"IMPORTANT_WRONG_HEAD":      -1000,
	"RESOURCE_VITALITY_ERROR":   1002,
	"RESOURCE_GOLD_ERROR":       1003,
	"RESOURCE_RMB_ERROR":        1004,
	"GUILD_EXIT_CHAIRMAN_ERROR": 1022,
	"UNKNOWN_ERROR":             -9999,
}

func (GAErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorShare, []int{0} }

// 服务器类型
type ServerType int32

const (
	ST_NONE          ServerType = 0
	ST_LoginServer   ServerType = 1
	ST_GateServer    ServerType = 2
	ST_GameServer    ServerType = 4
	ST_BattleServer  ServerType = 8
	ST_CenterServer  ServerType = 16
	ST_SessionServer ServerType = 32
	ST_ALLServer     ServerType = 63
)

var ServerType_name = map[int32]string{
	0:  "ST_NONE",
	1:  "ST_LoginServer",
	2:  "ST_GateServer",
	4:  "ST_GameServer",
	8:  "ST_BattleServer",
	16: "ST_CenterServer",
	32: "ST_SessionServer",
	63: "ST_ALLServer",
}
var ServerType_value = map[string]int32{
	"ST_NONE":          0,
	"ST_LoginServer":   1,
	"ST_GateServer":    2,
	"ST_GameServer":    4,
	"ST_BattleServer":  8,
	"ST_CenterServer":  16,
	"ST_SessionServer": 32,
	"ST_ALLServer":     63,
}

func (ServerType) EnumDescriptor() ([]byte, []int) { return fileDescriptorShare, []int{1} }

// 消息主类型
type ChannelType int32

const (
	Login        ChannelType = 0
	Heartbeat    ChannelType = 1
	GameServer   ChannelType = 100
	Shop         ChannelType = 101
	Chat         ChannelType = 102
	Bag          ChannelType = 103
	Attr         ChannelType = 104
	GroupCard    ChannelType = 105
	Stage        ChannelType = 106
	Hero         ChannelType = 107
	Wallet       ChannelType = 108
	MainQuest    ChannelType = 109
	DailyQuest   ChannelType = 110
	BattleServer ChannelType = 200
)

var ChannelType_name = map[int32]string{
	0:   "Login",
	1:   "Heartbeat",
	100: "GameServer",
	101: "Shop",
	102: "Chat",
	103: "Bag",
	104: "Attr",
	105: "GroupCard",
	106: "Stage",
	107: "Hero",
	108: "Wallet",
	109: "MainQuest",
	110: "DailyQuest",
	200: "BattleServer",
}
var ChannelType_value = map[string]int32{
	"Login":        0,
	"Heartbeat":    1,
	"GameServer":   100,
	"Shop":         101,
	"Chat":         102,
	"Bag":          103,
	"Attr":         104,
	"GroupCard":    105,
	"Stage":        106,
	"Hero":         107,
	"Wallet":       108,
	"MainQuest":    109,
	"DailyQuest":   110,
	"BattleServer": 200,
}

func (ChannelType) EnumDescriptor() ([]byte, []int) { return fileDescriptorShare, []int{2} }

func init() {
	proto.RegisterEnum("msgs.GAErrorCode", GAErrorCode_name, GAErrorCode_value)
	proto.RegisterEnum("msgs.ServerType", ServerType_name, ServerType_value)
	proto.RegisterEnum("msgs.ChannelType", ChannelType_name, ChannelType_value)
}
func (x GAErrorCode) String() string {
	s, ok := GAErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ServerType) String() string {
	s, ok := ServerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ChannelType) String() string {
	s, ok := ChannelType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

func init() { proto.RegisterFile("share.proto", fileDescriptorShare) }

var fileDescriptorShare = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0x69, 0xda, 0xb4, 0x2f, 0x6d, 0xb9, 0xbe, 0x56, 0x2a, 0x20, 0x74, 0x82, 0xb5,
	0x42, 0x2c, 0x7c, 0x00, 0xe4, 0xb8, 0xae, 0x63, 0x35, 0xb1, 0xc1, 0xbe, 0x52, 0x98, 0xac, 0xab,
	0x72, 0x38, 0x06, 0xd7, 0x8e, 0xce, 0x17, 0xa4, 0x6e, 0xec, 0x2c, 0x8c, 0x7c, 0x01, 0x24, 0x56,
	0xbe, 0x01, 0x63, 0xc7, 0x8e, 0x8c, 0xd4, 0x2c, 0x08, 0x18, 0xca, 0xc6, 0x04, 0xc8, 0x89, 0x1d,
	0xc1, 0x4d, 0x77, 0xbf, 0xff, 0x5f, 0xef, 0xfd, 0x9f, 0xde, 0x41, 0xb7, 0x18, 0x0b, 0x25, 0xef,
	0x4d, 0x54, 0xae, 0x73, 0x6c, 0x9f, 0x16, 0x71, 0xb1, 0xf7, 0xba, 0x05, 0x5d, 0xc7, 0xb4, 0x95,
	0xca, 0x95, 0x95, 0x8f, 0x24, 0xae, 0x40, 0xcb, 0x3f, 0xa4, 0x06, 0xae, 0x42, 0xfb, 0x40, 0x24,
	0x29, 0x25, 0xb8, 0x06, 0xcb, 0x33, 0x99, 0xb6, 0x70, 0x13, 0x20, 0x94, 0xea, 0xa5, 0x54, 0x07,
	0xd3, 0x34, 0xa5, 0x4b, 0xb8, 0x0e, 0xab, 0x87, 0xf2, 0x6c, 0xae, 0xb6, 0x71, 0x0b, 0x36, 0xbc,
	0xfc, 0x20, 0x9f, 0x66, 0x23, 0x2e, 0x54, 0x2c, 0x35, 0x5d, 0xc6, 0x3b, 0xb0, 0xe3, 0x0e, 0x1f,
	0xfa, 0x01, 0x37, 0x3d, 0x1e, 0x1d, 0x07, 0xbe, 0xe7, 0x44, 0x7d, 0xdb, 0xdc, 0xa7, 0x6f, 0x7f,
	0xfd, 0x99, 0x1f, 0x82, 0xb7, 0x60, 0x37, 0xb0, 0x43, 0xff, 0x28, 0xb0, 0xec, 0xe8, 0xb1, 0xcb,
	0xcd, 0x81, 0xcb, 0x9f, 0x46, 0x76, 0x10, 0xf8, 0x01, 0xfd, 0xd6, 0xc1, 0xeb, 0xb0, 0xbd, 0x50,
	0x1d, 0x7f, 0xb0, 0x5f, 0x2b, 0xdf, 0x3b, 0xb8, 0x0b, 0xb8, 0x50, 0x82, 0x61, 0xaf, 0x16, 0x7e,
	0x74, 0x90, 0xc1, 0x0d, 0xe7, 0xc8, 0xad, 0xac, 0x4f, 0x5c, 0x1e, 0x59, 0x7d, 0xd3, 0x0d, 0x86,
	0xa6, 0x57, 0xeb, 0xbf, 0x3b, 0x78, 0x13, 0x36, 0x8e, 0xbc, 0x43, 0xcf, 0x3f, 0x6e, 0xd8, 0xcf,
	0x0f, 0x4d, 0x98, 0xbd, 0x77, 0xa4, 0x99, 0x90, 0x9f, 0x4d, 0x24, 0x76, 0xa1, 0x13, 0xf2, 0xc8,
	0xf3, 0x3d, 0x9b, 0x1a, 0x88, 0xb0, 0x19, 0xf2, 0x68, 0x90, 0xc7, 0x49, 0x36, 0xb7, 0x50, 0x52,
	0x8d, 0x1c, 0xf2, 0xc8, 0x11, 0x5a, 0xd6, 0xa8, 0xb5, 0x40, 0xa7, 0x0d, 0x6a, 0xe3, 0x36, 0x5c,
	0x0b, 0x79, 0xd4, 0x13, 0x5a, 0xa7, 0x0d, 0x5c, 0xad, 0xa1, 0x25, 0x33, 0x2d, 0x55, 0x0d, 0x29,
	0xee, 0x00, 0x0d, 0x79, 0x14, 0xca, 0xa2, 0x48, 0xf2, 0xa6, 0xcb, 0x6d, 0xa4, 0xb0, 0x1e, 0xf2,
	0xc8, 0x1c, 0x0c, 0x6a, 0xf2, 0x60, 0xef, 0x23, 0x81, 0xae, 0x35, 0x16, 0x59, 0x26, 0xd3, 0x59,
	0xd0, 0x35, 0x58, 0x9e, 0x05, 0xa3, 0x06, 0x6e, 0xc0, 0x5a, 0x5f, 0x0a, 0xa5, 0x4f, 0xa4, 0xd0,
	0x94, 0x54, 0x2b, 0xfb, 0x27, 0xcb, 0xa8, 0xda, 0x6b, 0x38, 0xce, 0x27, 0x54, 0x56, 0x37, 0x6b,
	0x2c, 0x34, 0x7d, 0x86, 0x1d, 0x58, 0xea, 0x89, 0x98, 0xc6, 0x15, 0x32, 0xb5, 0x56, 0x74, 0x5c,
	0x55, 0x71, 0x54, 0x3e, 0x9d, 0x58, 0x42, 0x8d, 0x68, 0x52, 0xd5, 0x0f, 0xb5, 0x88, 0x25, 0x7d,
	0x5e, 0x79, 0xfa, 0x52, 0xe5, 0xf4, 0x05, 0x02, 0xac, 0x1c, 0x8b, 0x34, 0x95, 0x9a, 0xa6, 0x95,
	0x7f, 0x28, 0x92, 0xec, 0xd1, 0x54, 0x16, 0x9a, 0x9e, 0x56, 0x5d, 0xf7, 0x45, 0x92, 0x9e, 0xcd,
	0xdf, 0x19, 0x6e, 0xc1, 0xfa, 0x7f, 0xe3, 0x9f, 0x93, 0xde, 0xdd, 0x8b, 0x4b, 0x66, 0x7c, 0xba,
	0x64, 0xc6, 0xd5, 0x25, 0x23, 0xaf, 0x4a, 0x46, 0xde, 0x97, 0x8c, 0x9c, 0x97, 0x8c, 0x5c, 0x94,
	0x8c, 0x7c, 0x2e, 0x19, 0xf9, 0x5a, 0x32, 0xe3, 0xaa, 0x64, 0xe4, 0xcd, 0x17, 0x66, 0x9c, 0xac,
	0xcc, 0xfe, 0xec, 0xfd, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x74, 0x15, 0xbb, 0x40, 0xc2, 0x02,
	0x00, 0x00,
}
