// Code generated by protoc-gen-gogo.
// source: gamemsg.proto
// DO NOT EDIT!

package gameproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// =========chat=============
type ChatMsgType int32

const (
	C2S_PrivateChat      ChatMsgType = 0
	S2C_PrivateChat      ChatMsgType = 1
	S2C_PrivateOtherChat ChatMsgType = 2
	C2S_WorldChat        ChatMsgType = 3
	S2C_WorldChat        ChatMsgType = 4
)

var ChatMsgType_name = map[int32]string{
	0: "C2S_PrivateChat",
	1: "S2C_PrivateChat",
	2: "S2C_PrivateOtherChat",
	3: "C2S_WorldChat",
	4: "S2C_WorldChat",
}
var ChatMsgType_value = map[string]int32{
	"C2S_PrivateChat":      0,
	"S2C_PrivateChat":      1,
	"S2C_PrivateOtherChat": 2,
	"C2S_WorldChat":        3,
	"S2C_WorldChat":        4,
}

func (ChatMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{0} }

type C2S_PrivateChatMsg struct {
	TargetName string `protobuf:"bytes,1,opt,name=targetName,proto3" json:"targetName,omitempty"`
	Msg        string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *C2S_PrivateChatMsg) Reset()                    { *m = C2S_PrivateChatMsg{} }
func (*C2S_PrivateChatMsg) ProtoMessage()               {}
func (*C2S_PrivateChatMsg) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{0} }

func (m *C2S_PrivateChatMsg) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

func (m *C2S_PrivateChatMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type S2C_PrivateChatMsg struct {
	TargetName string `protobuf:"bytes,1,opt,name=targetName,proto3" json:"targetName,omitempty"`
	Msg        string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Result     int32  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *S2C_PrivateChatMsg) Reset()                    { *m = S2C_PrivateChatMsg{} }
func (*S2C_PrivateChatMsg) ProtoMessage()               {}
func (*S2C_PrivateChatMsg) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{1} }

func (m *S2C_PrivateChatMsg) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

func (m *S2C_PrivateChatMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *S2C_PrivateChatMsg) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type S2C_PrivateOtherChatMsg struct {
	SendName string `protobuf:"bytes,1,opt,name=sendName,proto3" json:"sendName,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *S2C_PrivateOtherChatMsg) Reset()                    { *m = S2C_PrivateOtherChatMsg{} }
func (*S2C_PrivateOtherChatMsg) ProtoMessage()               {}
func (*S2C_PrivateOtherChatMsg) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{2} }

func (m *S2C_PrivateOtherChatMsg) GetSendName() string {
	if m != nil {
		return m.SendName
	}
	return ""
}

func (m *S2C_PrivateOtherChatMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type C2S_WorldChatMsg struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *C2S_WorldChatMsg) Reset()                    { *m = C2S_WorldChatMsg{} }
func (*C2S_WorldChatMsg) ProtoMessage()               {}
func (*C2S_WorldChatMsg) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{3} }

func (m *C2S_WorldChatMsg) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type S2C_WorldChatMsg struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2C_WorldChatMsg) Reset()                    { *m = S2C_WorldChatMsg{} }
func (*S2C_WorldChatMsg) ProtoMessage()               {}
func (*S2C_WorldChatMsg) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{4} }

func (m *S2C_WorldChatMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2C_WorldChatMsg) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type S_ReviseUserInfo struct {
	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	HeadId   int32  `protobuf:"varint,2,opt,name=headId,proto3" json:"headId,omitempty"`
}

func (m *S_ReviseUserInfo) Reset()                    { *m = S_ReviseUserInfo{} }
func (*S_ReviseUserInfo) ProtoMessage()               {}
func (*S_ReviseUserInfo) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{5} }

func (m *S_ReviseUserInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *S_ReviseUserInfo) GetHeadId() int32 {
	if m != nil {
		return m.HeadId
	}
	return 0
}

type C_Response struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *C_Response) Reset()                    { *m = C_Response{} }
func (*C_Response) ProtoMessage()               {}
func (*C_Response) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{6} }

func (m *C_Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *C_Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type C_UpateAttr struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val int64  `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *C_UpateAttr) Reset()                    { *m = C_UpateAttr{} }
func (*C_UpateAttr) ProtoMessage()               {}
func (*C_UpateAttr) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{7} }

func (m *C_UpateAttr) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *C_UpateAttr) GetVal() int64 {
	if m != nil {
		return m.Val
	}
	return 0
}

// 请求战斗
type S_RequestBattle struct {
	StageId    int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	BattleType int32 `protobuf:"varint,2,opt,name=battleType,proto3" json:"battleType,omitempty"`
}

func (m *S_RequestBattle) Reset()                    { *m = S_RequestBattle{} }
func (*S_RequestBattle) ProtoMessage()               {}
func (*S_RequestBattle) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{8} }

func (m *S_RequestBattle) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *S_RequestBattle) GetBattleType() int32 {
	if m != nil {
		return m.BattleType
	}
	return 0
}

type C_RequestBattle struct {
	StageId    int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	BattleType int32 `protobuf:"varint,2,opt,name=battleType,proto3" json:"battleType,omitempty"`
	ErrCode    int32 `protobuf:"varint,3,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (m *C_RequestBattle) Reset()                    { *m = C_RequestBattle{} }
func (*C_RequestBattle) ProtoMessage()               {}
func (*C_RequestBattle) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{9} }

func (m *C_RequestBattle) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *C_RequestBattle) GetBattleType() int32 {
	if m != nil {
		return m.BattleType
	}
	return 0
}

func (m *C_RequestBattle) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

// 战斗开始
type C_StartBattle struct {
	StageId    int32  `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	BattleType int32  `protobuf:"varint,2,opt,name=battleType,proto3" json:"battleType,omitempty"`
	RoomId     string `protobuf:"bytes,3,opt,name=roomId,proto3" json:"roomId,omitempty"`
}

func (m *C_StartBattle) Reset()                    { *m = C_StartBattle{} }
func (*C_StartBattle) ProtoMessage()               {}
func (*C_StartBattle) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{10} }

func (m *C_StartBattle) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *C_StartBattle) GetBattleType() int32 {
	if m != nil {
		return m.BattleType
	}
	return 0
}

func (m *C_StartBattle) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

// 结算
type C_Balance struct {
	StageId    int32    `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	BattleType int32    `protobuf:"varint,2,opt,name=battleType,proto3" json:"battleType,omitempty"`
	Awards     []*Award `protobuf:"bytes,3,rep,name=awards" json:"awards,omitempty"`
}

func (m *C_Balance) Reset()                    { *m = C_Balance{} }
func (*C_Balance) ProtoMessage()               {}
func (*C_Balance) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{11} }

func (m *C_Balance) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *C_Balance) GetBattleType() int32 {
	if m != nil {
		return m.BattleType
	}
	return 0
}

func (m *C_Balance) GetAwards() []*Award {
	if m != nil {
		return m.Awards
	}
	return nil
}

type Award struct {
	AType int32 `protobuf:"varint,1,opt,name=aType,proto3" json:"aType,omitempty"`
	AVal  int32 `protobuf:"varint,2,opt,name=aVal,proto3" json:"aVal,omitempty"`
}

func (m *Award) Reset()                    { *m = Award{} }
func (*Award) ProtoMessage()               {}
func (*Award) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{12} }

func (m *Award) GetAType() int32 {
	if m != nil {
		return m.AType
	}
	return 0
}

func (m *Award) GetAVal() int32 {
	if m != nil {
		return m.AVal
	}
	return 0
}

// fight
type FVector struct {
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *FVector) Reset()                    { *m = FVector{} }
func (*FVector) ProtoMessage()               {}
func (*FVector) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{13} }

func (m *FVector) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *FVector) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Move struct {
	Angle float32 `protobuf:"fixed32,1,opt,name=angle,proto3" json:"angle,omitempty"`
}

func (m *Move) Reset()                    { *m = Move{} }
func (*Move) ProtoMessage()               {}
func (*Move) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{14} }

func (m *Move) GetAngle() float32 {
	if m != nil {
		return m.Angle
	}
	return 0
}

type Shot struct {
	Id       int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BulletId int32    `protobuf:"varint,2,opt,name=bulletId,proto3" json:"bulletId,omitempty"`
	Pos      *FVector `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
	Angel    float32  `protobuf:"fixed32,4,opt,name=angel,proto3" json:"angel,omitempty"`
}

func (m *Shot) Reset()                    { *m = Shot{} }
func (*Shot) ProtoMessage()               {}
func (*Shot) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{15} }

func (m *Shot) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Shot) GetBulletId() int32 {
	if m != nil {
		return m.BulletId
	}
	return 0
}

func (m *Shot) GetPos() *FVector {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Shot) GetAngel() float32 {
	if m != nil {
		return m.Angel
	}
	return 0
}

type UseItem struct {
	ItemId int32 `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (m *UseItem) Reset()                    { *m = UseItem{} }
func (*UseItem) ProtoMessage()               {}
func (*UseItem) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{16} }

func (m *UseItem) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type FighterSnapInfo struct {
	Id  int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pos *FVector `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
	Vel *FVector `protobuf:"bytes,3,opt,name=vel" json:"vel,omitempty"`
}

func (m *FighterSnapInfo) Reset()                    { *m = FighterSnapInfo{} }
func (*FighterSnapInfo) ProtoMessage()               {}
func (*FighterSnapInfo) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{17} }

func (m *FighterSnapInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FighterSnapInfo) GetPos() *FVector {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *FighterSnapInfo) GetVel() *FVector {
	if m != nil {
		return m.Vel
	}
	return nil
}

type Snap struct {
	Infos []*FighterSnapInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
}

func (m *Snap) Reset()                    { *m = Snap{} }
func (*Snap) ProtoMessage()               {}
func (*Snap) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{18} }

func (m *Snap) GetInfos() []*FighterSnapInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type FighterInfo struct {
	Id   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pos  *FVector `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
	Vel  *FVector `protobuf:"bytes,3,opt,name=vel" json:"vel,omitempty"`
	Name string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Hp   int32    `protobuf:"varint,5,opt,name=hp,proto3" json:"hp,omitempty"`
}

func (m *FighterInfo) Reset()                    { *m = FighterInfo{} }
func (*FighterInfo) ProtoMessage()               {}
func (*FighterInfo) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{19} }

func (m *FighterInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FighterInfo) GetPos() *FVector {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *FighterInfo) GetVel() *FVector {
	if m != nil {
		return m.Vel
	}
	return nil
}

func (m *FighterInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FighterInfo) GetHp() int32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

type BattleStart struct {
	Self     *FighterInfo   `protobuf:"bytes,1,opt,name=self" json:"self,omitempty"`
	Fighters []*FighterInfo `protobuf:"bytes,2,rep,name=fighters" json:"fighters,omitempty"`
}

func (m *BattleStart) Reset()                    { *m = BattleStart{} }
func (*BattleStart) ProtoMessage()               {}
func (*BattleStart) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{20} }

func (m *BattleStart) GetSelf() *FighterInfo {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *BattleStart) GetFighters() []*FighterInfo {
	if m != nil {
		return m.Fighters
	}
	return nil
}

type NewStage struct {
	Stage    int32          `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`
	Fighters []*FighterInfo `protobuf:"bytes,2,rep,name=fighters" json:"fighters,omitempty"`
}

func (m *NewStage) Reset()                    { *m = NewStage{} }
func (*NewStage) ProtoMessage()               {}
func (*NewStage) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{21} }

func (m *NewStage) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *NewStage) GetFighters() []*FighterInfo {
	if m != nil {
		return m.Fighters
	}
	return nil
}

type GameOver struct {
	Winner int32 `protobuf:"varint,1,opt,name=winner,proto3" json:"winner,omitempty"`
	Time   int32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Stage  int32 `protobuf:"varint,3,opt,name=stage,proto3" json:"stage,omitempty"`
	Kill   int32 `protobuf:"varint,4,opt,name=kill,proto3" json:"kill,omitempty"`
}

func (m *GameOver) Reset()                    { *m = GameOver{} }
func (*GameOver) ProtoMessage()               {}
func (*GameOver) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{22} }

func (m *GameOver) GetWinner() int32 {
	if m != nil {
		return m.Winner
	}
	return 0
}

func (m *GameOver) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GameOver) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *GameOver) GetKill() int32 {
	if m != nil {
		return m.Kill
	}
	return 0
}

type Hit struct {
	BulletId int32 `protobuf:"varint,1,opt,name=bulletId,proto3" json:"bulletId,omitempty"`
	TargetId int32 `protobuf:"varint,2,opt,name=targetId,proto3" json:"targetId,omitempty"`
	LoseHP   int32 `protobuf:"varint,3,opt,name=loseHP,proto3" json:"loseHP,omitempty"`
}

func (m *Hit) Reset()                    { *m = Hit{} }
func (*Hit) ProtoMessage()               {}
func (*Hit) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{23} }

func (m *Hit) GetBulletId() int32 {
	if m != nil {
		return m.BulletId
	}
	return 0
}

func (m *Hit) GetTargetId() int32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Hit) GetLoseHP() int32 {
	if m != nil {
		return m.LoseHP
	}
	return 0
}

type AddHP struct {
	Add int32 `protobuf:"varint,1,opt,name=add,proto3" json:"add,omitempty"`
	Id  int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AddHP) Reset()                    { *m = AddHP{} }
func (*AddHP) ProtoMessage()               {}
func (*AddHP) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{24} }

func (m *AddHP) GetAdd() int32 {
	if m != nil {
		return m.Add
	}
	return 0
}

func (m *AddHP) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Dead struct {
	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EnemyId int32 `protobuf:"varint,2,opt,name=enemyId,proto3" json:"enemyId,omitempty"`
}

func (m *Dead) Reset()                    { *m = Dead{} }
func (*Dead) ProtoMessage()               {}
func (*Dead) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{25} }

func (m *Dead) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Dead) GetEnemyId() int32 {
	if m != nil {
		return m.EnemyId
	}
	return 0
}

type AddEntity struct {
	Id    int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pos   *FVector `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
	Vel   *FVector `protobuf:"bytes,3,opt,name=vel" json:"vel,omitempty"`
	Etype int32    `protobuf:"varint,4,opt,name=etype,proto3" json:"etype,omitempty"`
}

func (m *AddEntity) Reset()                    { *m = AddEntity{} }
func (*AddEntity) ProtoMessage()               {}
func (*AddEntity) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{26} }

func (m *AddEntity) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddEntity) GetPos() *FVector {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *AddEntity) GetVel() *FVector {
	if m != nil {
		return m.Vel
	}
	return nil
}

func (m *AddEntity) GetEtype() int32 {
	if m != nil {
		return m.Etype
	}
	return 0
}

type RemoveEntity struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Etype int32 `protobuf:"varint,2,opt,name=etype,proto3" json:"etype,omitempty"`
}

func (m *RemoveEntity) Reset()                    { *m = RemoveEntity{} }
func (*RemoveEntity) ProtoMessage()               {}
func (*RemoveEntity) Descriptor() ([]byte, []int) { return fileDescriptorGamemsg, []int{27} }

func (m *RemoveEntity) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RemoveEntity) GetEtype() int32 {
	if m != nil {
		return m.Etype
	}
	return 0
}

func init() {
	proto.RegisterType((*C2S_PrivateChatMsg)(nil), "gameproto.C2S_PrivateChatMsg")
	proto.RegisterType((*S2C_PrivateChatMsg)(nil), "gameproto.S2C_PrivateChatMsg")
	proto.RegisterType((*S2C_PrivateOtherChatMsg)(nil), "gameproto.S2C_PrivateOtherChatMsg")
	proto.RegisterType((*C2S_WorldChatMsg)(nil), "gameproto.C2S_WorldChatMsg")
	proto.RegisterType((*S2C_WorldChatMsg)(nil), "gameproto.S2C_WorldChatMsg")
	proto.RegisterType((*S_ReviseUserInfo)(nil), "gameproto.S_ReviseUserInfo")
	proto.RegisterType((*C_Response)(nil), "gameproto.C_Response")
	proto.RegisterType((*C_UpateAttr)(nil), "gameproto.C_UpateAttr")
	proto.RegisterType((*S_RequestBattle)(nil), "gameproto.S_RequestBattle")
	proto.RegisterType((*C_RequestBattle)(nil), "gameproto.C_RequestBattle")
	proto.RegisterType((*C_StartBattle)(nil), "gameproto.C_StartBattle")
	proto.RegisterType((*C_Balance)(nil), "gameproto.C_Balance")
	proto.RegisterType((*Award)(nil), "gameproto.Award")
	proto.RegisterType((*FVector)(nil), "gameproto.FVector")
	proto.RegisterType((*Move)(nil), "gameproto.Move")
	proto.RegisterType((*Shot)(nil), "gameproto.Shot")
	proto.RegisterType((*UseItem)(nil), "gameproto.UseItem")
	proto.RegisterType((*FighterSnapInfo)(nil), "gameproto.FighterSnapInfo")
	proto.RegisterType((*Snap)(nil), "gameproto.Snap")
	proto.RegisterType((*FighterInfo)(nil), "gameproto.FighterInfo")
	proto.RegisterType((*BattleStart)(nil), "gameproto.BattleStart")
	proto.RegisterType((*NewStage)(nil), "gameproto.NewStage")
	proto.RegisterType((*GameOver)(nil), "gameproto.GameOver")
	proto.RegisterType((*Hit)(nil), "gameproto.Hit")
	proto.RegisterType((*AddHP)(nil), "gameproto.AddHP")
	proto.RegisterType((*Dead)(nil), "gameproto.Dead")
	proto.RegisterType((*AddEntity)(nil), "gameproto.AddEntity")
	proto.RegisterType((*RemoveEntity)(nil), "gameproto.RemoveEntity")
	proto.RegisterEnum("gameproto.ChatMsgType", ChatMsgType_name, ChatMsgType_value)
}
func (x ChatMsgType) String() string {
	s, ok := ChatMsgType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *C2S_PrivateChatMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*C2S_PrivateChatMsg)
	if !ok {
		that2, ok := that.(C2S_PrivateChatMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TargetName != that1.TargetName {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *S2C_PrivateChatMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*S2C_PrivateChatMsg)
	if !ok {
		that2, ok := that.(S2C_PrivateChatMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TargetName != that1.TargetName {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *S2C_PrivateOtherChatMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*S2C_PrivateOtherChatMsg)
	if !ok {
		that2, ok := that.(S2C_PrivateOtherChatMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SendName != that1.SendName {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *C2S_WorldChatMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*C2S_WorldChatMsg)
	if !ok {
		that2, ok := that.(C2S_WorldChatMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *S2C_WorldChatMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*S2C_WorldChatMsg)
	if !ok {
		that2, ok := that.(S2C_WorldChatMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *S_ReviseUserInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*S_ReviseUserInfo)
	if !ok {
		that2, ok := that.(S_ReviseUserInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.HeadId != that1.HeadId {
		return false
	}
	return true
}
func (this *C_Response) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*C_Response)
	if !ok {
		that2, ok := that.(C_Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *C_UpateAttr) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*C_UpateAttr)
	if !ok {
		that2, ok := that.(C_UpateAttr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Val != that1.Val {
		return false
	}
	return true
}
func (this *S_RequestBattle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*S_RequestBattle)
	if !ok {
		that2, ok := that.(S_RequestBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.StageId != that1.StageId {
		return false
	}
	if this.BattleType != that1.BattleType {
		return false
	}
	return true
}
func (this *C_RequestBattle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*C_RequestBattle)
	if !ok {
		that2, ok := that.(C_RequestBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.StageId != that1.StageId {
		return false
	}
	if this.BattleType != that1.BattleType {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	return true
}
func (this *C_StartBattle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*C_StartBattle)
	if !ok {
		that2, ok := that.(C_StartBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.StageId != that1.StageId {
		return false
	}
	if this.BattleType != that1.BattleType {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	return true
}
func (this *C_Balance) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*C_Balance)
	if !ok {
		that2, ok := that.(C_Balance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.StageId != that1.StageId {
		return false
	}
	if this.BattleType != that1.BattleType {
		return false
	}
	if len(this.Awards) != len(that1.Awards) {
		return false
	}
	for i := range this.Awards {
		if !this.Awards[i].Equal(that1.Awards[i]) {
			return false
		}
	}
	return true
}
func (this *Award) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Award)
	if !ok {
		that2, ok := that.(Award)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AType != that1.AType {
		return false
	}
	if this.AVal != that1.AVal {
		return false
	}
	return true
}
func (this *FVector) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FVector)
	if !ok {
		that2, ok := that.(FVector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *Move) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Move)
	if !ok {
		that2, ok := that.(Move)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Angle != that1.Angle {
		return false
	}
	return true
}
func (this *Shot) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Shot)
	if !ok {
		that2, ok := that.(Shot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.BulletId != that1.BulletId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.Angel != that1.Angel {
		return false
	}
	return true
}
func (this *UseItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UseItem)
	if !ok {
		that2, ok := that.(UseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	return true
}
func (this *FighterSnapInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FighterSnapInfo)
	if !ok {
		that2, ok := that.(FighterSnapInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Vel.Equal(that1.Vel) {
		return false
	}
	return true
}
func (this *Snap) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Snap)
	if !ok {
		that2, ok := that.(Snap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Infos) != len(that1.Infos) {
		return false
	}
	for i := range this.Infos {
		if !this.Infos[i].Equal(that1.Infos[i]) {
			return false
		}
	}
	return true
}
func (this *FighterInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FighterInfo)
	if !ok {
		that2, ok := that.(FighterInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Vel.Equal(that1.Vel) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Hp != that1.Hp {
		return false
	}
	return true
}
func (this *BattleStart) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BattleStart)
	if !ok {
		that2, ok := that.(BattleStart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Self.Equal(that1.Self) {
		return false
	}
	if len(this.Fighters) != len(that1.Fighters) {
		return false
	}
	for i := range this.Fighters {
		if !this.Fighters[i].Equal(that1.Fighters[i]) {
			return false
		}
	}
	return true
}
func (this *NewStage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewStage)
	if !ok {
		that2, ok := that.(NewStage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Stage != that1.Stage {
		return false
	}
	if len(this.Fighters) != len(that1.Fighters) {
		return false
	}
	for i := range this.Fighters {
		if !this.Fighters[i].Equal(that1.Fighters[i]) {
			return false
		}
	}
	return true
}
func (this *GameOver) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GameOver)
	if !ok {
		that2, ok := that.(GameOver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Winner != that1.Winner {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Stage != that1.Stage {
		return false
	}
	if this.Kill != that1.Kill {
		return false
	}
	return true
}
func (this *Hit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Hit)
	if !ok {
		that2, ok := that.(Hit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.BulletId != that1.BulletId {
		return false
	}
	if this.TargetId != that1.TargetId {
		return false
	}
	if this.LoseHP != that1.LoseHP {
		return false
	}
	return true
}
func (this *AddHP) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AddHP)
	if !ok {
		that2, ok := that.(AddHP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Add != that1.Add {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Dead) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Dead)
	if !ok {
		that2, ok := that.(Dead)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.EnemyId != that1.EnemyId {
		return false
	}
	return true
}
func (this *AddEntity) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AddEntity)
	if !ok {
		that2, ok := that.(AddEntity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Vel.Equal(that1.Vel) {
		return false
	}
	if this.Etype != that1.Etype {
		return false
	}
	return true
}
func (this *RemoveEntity) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RemoveEntity)
	if !ok {
		that2, ok := that.(RemoveEntity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Etype != that1.Etype {
		return false
	}
	return true
}
func (this *C2S_PrivateChatMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.C2S_PrivateChatMsg{")
	s = append(s, "TargetName: "+fmt.Sprintf("%#v", this.TargetName)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S2C_PrivateChatMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gameproto.S2C_PrivateChatMsg{")
	s = append(s, "TargetName: "+fmt.Sprintf("%#v", this.TargetName)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S2C_PrivateOtherChatMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.S2C_PrivateOtherChatMsg{")
	s = append(s, "SendName: "+fmt.Sprintf("%#v", this.SendName)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C2S_WorldChatMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gameproto.C2S_WorldChatMsg{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S2C_WorldChatMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.S2C_WorldChatMsg{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S_ReviseUserInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.S_ReviseUserInfo{")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "HeadId: "+fmt.Sprintf("%#v", this.HeadId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C_Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.C_Response{")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C_UpateAttr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.C_UpateAttr{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Val: "+fmt.Sprintf("%#v", this.Val)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S_RequestBattle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.S_RequestBattle{")
	s = append(s, "StageId: "+fmt.Sprintf("%#v", this.StageId)+",\n")
	s = append(s, "BattleType: "+fmt.Sprintf("%#v", this.BattleType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C_RequestBattle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gameproto.C_RequestBattle{")
	s = append(s, "StageId: "+fmt.Sprintf("%#v", this.StageId)+",\n")
	s = append(s, "BattleType: "+fmt.Sprintf("%#v", this.BattleType)+",\n")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C_StartBattle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gameproto.C_StartBattle{")
	s = append(s, "StageId: "+fmt.Sprintf("%#v", this.StageId)+",\n")
	s = append(s, "BattleType: "+fmt.Sprintf("%#v", this.BattleType)+",\n")
	s = append(s, "RoomId: "+fmt.Sprintf("%#v", this.RoomId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C_Balance) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gameproto.C_Balance{")
	s = append(s, "StageId: "+fmt.Sprintf("%#v", this.StageId)+",\n")
	s = append(s, "BattleType: "+fmt.Sprintf("%#v", this.BattleType)+",\n")
	if this.Awards != nil {
		s = append(s, "Awards: "+fmt.Sprintf("%#v", this.Awards)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Award) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.Award{")
	s = append(s, "AType: "+fmt.Sprintf("%#v", this.AType)+",\n")
	s = append(s, "AVal: "+fmt.Sprintf("%#v", this.AVal)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FVector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.FVector{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Move) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gameproto.Move{")
	s = append(s, "Angle: "+fmt.Sprintf("%#v", this.Angle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Shot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gameproto.Shot{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "BulletId: "+fmt.Sprintf("%#v", this.BulletId)+",\n")
	if this.Pos != nil {
		s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	}
	s = append(s, "Angel: "+fmt.Sprintf("%#v", this.Angel)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gameproto.UseItem{")
	s = append(s, "ItemId: "+fmt.Sprintf("%#v", this.ItemId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FighterSnapInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gameproto.FighterSnapInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Pos != nil {
		s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	}
	if this.Vel != nil {
		s = append(s, "Vel: "+fmt.Sprintf("%#v", this.Vel)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Snap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gameproto.Snap{")
	if this.Infos != nil {
		s = append(s, "Infos: "+fmt.Sprintf("%#v", this.Infos)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FighterInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&gameproto.FighterInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Pos != nil {
		s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	}
	if this.Vel != nil {
		s = append(s, "Vel: "+fmt.Sprintf("%#v", this.Vel)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Hp: "+fmt.Sprintf("%#v", this.Hp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BattleStart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.BattleStart{")
	if this.Self != nil {
		s = append(s, "Self: "+fmt.Sprintf("%#v", this.Self)+",\n")
	}
	if this.Fighters != nil {
		s = append(s, "Fighters: "+fmt.Sprintf("%#v", this.Fighters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewStage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.NewStage{")
	s = append(s, "Stage: "+fmt.Sprintf("%#v", this.Stage)+",\n")
	if this.Fighters != nil {
		s = append(s, "Fighters: "+fmt.Sprintf("%#v", this.Fighters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameOver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gameproto.GameOver{")
	s = append(s, "Winner: "+fmt.Sprintf("%#v", this.Winner)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Stage: "+fmt.Sprintf("%#v", this.Stage)+",\n")
	s = append(s, "Kill: "+fmt.Sprintf("%#v", this.Kill)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Hit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gameproto.Hit{")
	s = append(s, "BulletId: "+fmt.Sprintf("%#v", this.BulletId)+",\n")
	s = append(s, "TargetId: "+fmt.Sprintf("%#v", this.TargetId)+",\n")
	s = append(s, "LoseHP: "+fmt.Sprintf("%#v", this.LoseHP)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddHP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.AddHP{")
	s = append(s, "Add: "+fmt.Sprintf("%#v", this.Add)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dead) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.Dead{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "EnemyId: "+fmt.Sprintf("%#v", this.EnemyId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddEntity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gameproto.AddEntity{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Pos != nil {
		s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	}
	if this.Vel != nil {
		s = append(s, "Vel: "+fmt.Sprintf("%#v", this.Vel)+",\n")
	}
	s = append(s, "Etype: "+fmt.Sprintf("%#v", this.Etype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveEntity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.RemoveEntity{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Etype: "+fmt.Sprintf("%#v", this.Etype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGamemsg(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *C2S_PrivateChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PrivateChatMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TargetName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.TargetName)))
		i += copy(dAtA[i:], m.TargetName)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *S2C_PrivateChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PrivateChatMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TargetName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.TargetName)))
		i += copy(dAtA[i:], m.TargetName)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Result != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *S2C_PrivateOtherChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PrivateOtherChatMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SendName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.SendName)))
		i += copy(dAtA[i:], m.SendName)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *C2S_WorldChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_WorldChatMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2C_WorldChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_WorldChatMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S_ReviseUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S_ReviseUserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nickname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.HeadId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.HeadId))
	}
	return i, nil
}

func (m *C_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *C_UpateAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_UpateAttr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Val != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Val))
	}
	return i, nil
}

func (m *S_RequestBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S_RequestBattle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.StageId))
	}
	if m.BattleType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.BattleType))
	}
	return i, nil
}

func (m *C_RequestBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_RequestBattle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.StageId))
	}
	if m.BattleType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.BattleType))
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.ErrCode))
	}
	return i, nil
}

func (m *C_StartBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_StartBattle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.StageId))
	}
	if m.BattleType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.BattleType))
	}
	if len(m.RoomId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.RoomId)))
		i += copy(dAtA[i:], m.RoomId)
	}
	return i, nil
}

func (m *C_Balance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_Balance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.StageId))
	}
	if m.BattleType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.BattleType))
	}
	if len(m.Awards) > 0 {
		for _, msg := range m.Awards {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGamemsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Award) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Award) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.AType))
	}
	if m.AVal != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.AVal))
	}
	return i, nil
}

func (m *FVector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FVector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Gamemsg(dAtA, i, uint32(math.Float32bits(float32(m.X))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Gamemsg(dAtA, i, uint32(math.Float32bits(float32(m.Y))))
	}
	return i, nil
}

func (m *Move) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Move) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Angle != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Gamemsg(dAtA, i, uint32(math.Float32bits(float32(m.Angle))))
	}
	return i, nil
}

func (m *Shot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
	}
	if m.BulletId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.BulletId))
	}
	if m.Pos != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Pos.Size()))
		n1, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Angel != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Gamemsg(dAtA, i, uint32(math.Float32bits(float32(m.Angel))))
	}
	return i, nil
}

func (m *UseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.ItemId))
	}
	return i, nil
}

func (m *FighterSnapInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FighterSnapInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
	}
	if m.Pos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Pos.Size()))
		n2, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Vel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Vel.Size()))
		n3, err := m.Vel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Snap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGamemsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FighterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FighterInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
	}
	if m.Pos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Pos.Size()))
		n4, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Vel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Vel.Size()))
		n5, err := m.Vel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Hp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Hp))
	}
	return i, nil
}

func (m *BattleStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Self != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Self.Size()))
		n6, err := m.Self.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Fighters) > 0 {
		for _, msg := range m.Fighters {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGamemsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NewStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewStage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Stage))
	}
	if len(m.Fighters) > 0 {
		for _, msg := range m.Fighters {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGamemsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GameOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameOver) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Winner != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Winner))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Time))
	}
	if m.Stage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Stage))
	}
	if m.Kill != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Kill))
	}
	return i, nil
}

func (m *Hit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BulletId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.BulletId))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.TargetId))
	}
	if m.LoseHP != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.LoseHP))
	}
	return i, nil
}

func (m *AddHP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddHP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Add != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Add))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *Dead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dead) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
	}
	if m.EnemyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.EnemyId))
	}
	return i, nil
}

func (m *AddEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEntity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
	}
	if m.Pos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Pos.Size()))
		n7, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Vel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Vel.Size()))
		n8, err := m.Vel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Etype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Etype))
	}
	return i, nil
}

func (m *RemoveEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveEntity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
	}
	if m.Etype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Etype))
	}
	return i, nil
}

func encodeFixed64Gamemsg(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gamemsg(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGamemsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2S_PrivateChatMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.TargetName)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *S2C_PrivateChatMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.TargetName)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovGamemsg(uint64(m.Result))
	}
	return n
}

func (m *S2C_PrivateOtherChatMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.SendName)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *C2S_WorldChatMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *S2C_WorldChatMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *S_ReviseUserInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.HeadId != 0 {
		n += 1 + sovGamemsg(uint64(m.HeadId))
	}
	return n
}

func (m *C_Response) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovGamemsg(uint64(m.ErrCode))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *C_UpateAttr) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Val != 0 {
		n += 1 + sovGamemsg(uint64(m.Val))
	}
	return n
}

func (m *S_RequestBattle) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovGamemsg(uint64(m.StageId))
	}
	if m.BattleType != 0 {
		n += 1 + sovGamemsg(uint64(m.BattleType))
	}
	return n
}

func (m *C_RequestBattle) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovGamemsg(uint64(m.StageId))
	}
	if m.BattleType != 0 {
		n += 1 + sovGamemsg(uint64(m.BattleType))
	}
	if m.ErrCode != 0 {
		n += 1 + sovGamemsg(uint64(m.ErrCode))
	}
	return n
}

func (m *C_StartBattle) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovGamemsg(uint64(m.StageId))
	}
	if m.BattleType != 0 {
		n += 1 + sovGamemsg(uint64(m.BattleType))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *C_Balance) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovGamemsg(uint64(m.StageId))
	}
	if m.BattleType != 0 {
		n += 1 + sovGamemsg(uint64(m.BattleType))
	}
	if len(m.Awards) > 0 {
		for _, e := range m.Awards {
			l = e.Size()
			n += 1 + l + sovGamemsg(uint64(l))
		}
	}
	return n
}

func (m *Award) Size() (n int) {
	var l int
	_ = l
	if m.AType != 0 {
		n += 1 + sovGamemsg(uint64(m.AType))
	}
	if m.AVal != 0 {
		n += 1 + sovGamemsg(uint64(m.AVal))
	}
	return n
}

func (m *FVector) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	return n
}

func (m *Move) Size() (n int) {
	var l int
	_ = l
	if m.Angle != 0 {
		n += 5
	}
	return n
}

func (m *Shot) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	if m.BulletId != 0 {
		n += 1 + sovGamemsg(uint64(m.BulletId))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Angel != 0 {
		n += 5
	}
	return n
}

func (m *UseItem) Size() (n int) {
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovGamemsg(uint64(m.ItemId))
	}
	return n
}

func (m *FighterSnapInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Vel != nil {
		l = m.Vel.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *Snap) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovGamemsg(uint64(l))
		}
	}
	return n
}

func (m *FighterInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Vel != nil {
		l = m.Vel.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Hp != 0 {
		n += 1 + sovGamemsg(uint64(m.Hp))
	}
	return n
}

func (m *BattleStart) Size() (n int) {
	var l int
	_ = l
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if len(m.Fighters) > 0 {
		for _, e := range m.Fighters {
			l = e.Size()
			n += 1 + l + sovGamemsg(uint64(l))
		}
	}
	return n
}

func (m *NewStage) Size() (n int) {
	var l int
	_ = l
	if m.Stage != 0 {
		n += 1 + sovGamemsg(uint64(m.Stage))
	}
	if len(m.Fighters) > 0 {
		for _, e := range m.Fighters {
			l = e.Size()
			n += 1 + l + sovGamemsg(uint64(l))
		}
	}
	return n
}

func (m *GameOver) Size() (n int) {
	var l int
	_ = l
	if m.Winner != 0 {
		n += 1 + sovGamemsg(uint64(m.Winner))
	}
	if m.Time != 0 {
		n += 1 + sovGamemsg(uint64(m.Time))
	}
	if m.Stage != 0 {
		n += 1 + sovGamemsg(uint64(m.Stage))
	}
	if m.Kill != 0 {
		n += 1 + sovGamemsg(uint64(m.Kill))
	}
	return n
}

func (m *Hit) Size() (n int) {
	var l int
	_ = l
	if m.BulletId != 0 {
		n += 1 + sovGamemsg(uint64(m.BulletId))
	}
	if m.TargetId != 0 {
		n += 1 + sovGamemsg(uint64(m.TargetId))
	}
	if m.LoseHP != 0 {
		n += 1 + sovGamemsg(uint64(m.LoseHP))
	}
	return n
}

func (m *AddHP) Size() (n int) {
	var l int
	_ = l
	if m.Add != 0 {
		n += 1 + sovGamemsg(uint64(m.Add))
	}
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	return n
}

func (m *Dead) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	if m.EnemyId != 0 {
		n += 1 + sovGamemsg(uint64(m.EnemyId))
	}
	return n
}

func (m *AddEntity) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Vel != nil {
		l = m.Vel.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Etype != 0 {
		n += 1 + sovGamemsg(uint64(m.Etype))
	}
	return n
}

func (m *RemoveEntity) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	if m.Etype != 0 {
		n += 1 + sovGamemsg(uint64(m.Etype))
	}
	return n
}

func sovGamemsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGamemsg(x uint64) (n int) {
	return sovGamemsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *C2S_PrivateChatMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2S_PrivateChatMsg{`,
		`TargetName:` + fmt.Sprintf("%v", this.TargetName) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S2C_PrivateChatMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S2C_PrivateChatMsg{`,
		`TargetName:` + fmt.Sprintf("%v", this.TargetName) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S2C_PrivateOtherChatMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S2C_PrivateOtherChatMsg{`,
		`SendName:` + fmt.Sprintf("%v", this.SendName) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2S_WorldChatMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2S_WorldChatMsg{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S2C_WorldChatMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S2C_WorldChatMsg{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S_ReviseUserInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S_ReviseUserInfo{`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`HeadId:` + fmt.Sprintf("%v", this.HeadId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C_Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C_Response{`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C_UpateAttr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C_UpateAttr{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Val:` + fmt.Sprintf("%v", this.Val) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S_RequestBattle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S_RequestBattle{`,
		`StageId:` + fmt.Sprintf("%v", this.StageId) + `,`,
		`BattleType:` + fmt.Sprintf("%v", this.BattleType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C_RequestBattle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C_RequestBattle{`,
		`StageId:` + fmt.Sprintf("%v", this.StageId) + `,`,
		`BattleType:` + fmt.Sprintf("%v", this.BattleType) + `,`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C_StartBattle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C_StartBattle{`,
		`StageId:` + fmt.Sprintf("%v", this.StageId) + `,`,
		`BattleType:` + fmt.Sprintf("%v", this.BattleType) + `,`,
		`RoomId:` + fmt.Sprintf("%v", this.RoomId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C_Balance) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C_Balance{`,
		`StageId:` + fmt.Sprintf("%v", this.StageId) + `,`,
		`BattleType:` + fmt.Sprintf("%v", this.BattleType) + `,`,
		`Awards:` + strings.Replace(fmt.Sprintf("%v", this.Awards), "Award", "Award", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Award) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Award{`,
		`AType:` + fmt.Sprintf("%v", this.AType) + `,`,
		`AVal:` + fmt.Sprintf("%v", this.AVal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FVector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FVector{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Move) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Move{`,
		`Angle:` + fmt.Sprintf("%v", this.Angle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Shot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Shot{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`BulletId:` + fmt.Sprintf("%v", this.BulletId) + `,`,
		`Pos:` + strings.Replace(fmt.Sprintf("%v", this.Pos), "FVector", "FVector", 1) + `,`,
		`Angel:` + fmt.Sprintf("%v", this.Angel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UseItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UseItem{`,
		`ItemId:` + fmt.Sprintf("%v", this.ItemId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FighterSnapInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FighterSnapInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Pos:` + strings.Replace(fmt.Sprintf("%v", this.Pos), "FVector", "FVector", 1) + `,`,
		`Vel:` + strings.Replace(fmt.Sprintf("%v", this.Vel), "FVector", "FVector", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Snap) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Snap{`,
		`Infos:` + strings.Replace(fmt.Sprintf("%v", this.Infos), "FighterSnapInfo", "FighterSnapInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FighterInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FighterInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Pos:` + strings.Replace(fmt.Sprintf("%v", this.Pos), "FVector", "FVector", 1) + `,`,
		`Vel:` + strings.Replace(fmt.Sprintf("%v", this.Vel), "FVector", "FVector", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Hp:` + fmt.Sprintf("%v", this.Hp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BattleStart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BattleStart{`,
		`Self:` + strings.Replace(fmt.Sprintf("%v", this.Self), "FighterInfo", "FighterInfo", 1) + `,`,
		`Fighters:` + strings.Replace(fmt.Sprintf("%v", this.Fighters), "FighterInfo", "FighterInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewStage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewStage{`,
		`Stage:` + fmt.Sprintf("%v", this.Stage) + `,`,
		`Fighters:` + strings.Replace(fmt.Sprintf("%v", this.Fighters), "FighterInfo", "FighterInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameOver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameOver{`,
		`Winner:` + fmt.Sprintf("%v", this.Winner) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Stage:` + fmt.Sprintf("%v", this.Stage) + `,`,
		`Kill:` + fmt.Sprintf("%v", this.Kill) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Hit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Hit{`,
		`BulletId:` + fmt.Sprintf("%v", this.BulletId) + `,`,
		`TargetId:` + fmt.Sprintf("%v", this.TargetId) + `,`,
		`LoseHP:` + fmt.Sprintf("%v", this.LoseHP) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddHP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddHP{`,
		`Add:` + fmt.Sprintf("%v", this.Add) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dead) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Dead{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`EnemyId:` + fmt.Sprintf("%v", this.EnemyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddEntity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddEntity{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Pos:` + strings.Replace(fmt.Sprintf("%v", this.Pos), "FVector", "FVector", 1) + `,`,
		`Vel:` + strings.Replace(fmt.Sprintf("%v", this.Vel), "FVector", "FVector", 1) + `,`,
		`Etype:` + fmt.Sprintf("%v", this.Etype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveEntity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveEntity{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Etype:` + fmt.Sprintf("%v", this.Etype) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGamemsg(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *C2S_PrivateChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PrivateChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PrivateChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PrivateChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PrivateChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PrivateChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PrivateOtherChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PrivateOtherChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PrivateOtherChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_WorldChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_WorldChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_WorldChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_WorldChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_WorldChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_WorldChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S_ReviseUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S_ReviseUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S_ReviseUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadId", wireType)
			}
			m.HeadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_UpateAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_UpateAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_UpateAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S_RequestBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S_RequestBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S_RequestBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleType", wireType)
			}
			m.BattleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_RequestBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_RequestBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_RequestBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleType", wireType)
			}
			m.BattleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_StartBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_StartBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_StartBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleType", wireType)
			}
			m.BattleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_Balance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_Balance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_Balance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleType", wireType)
			}
			m.BattleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Awards = append(m.Awards, &Award{})
			if err := m.Awards[len(m.Awards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Award) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Award: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Award: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AType", wireType)
			}
			m.AType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVal", wireType)
			}
			m.AVal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AVal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FVector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FVector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FVector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Y = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Move) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Move: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Move: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Angle", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Angle = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BulletId", wireType)
			}
			m.BulletId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BulletId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &FVector{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Angel", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Angel = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FighterSnapInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FighterSnapInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FighterSnapInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &FVector{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vel == nil {
				m.Vel = &FVector{}
			}
			if err := m.Vel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &FighterSnapInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FighterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FighterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FighterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &FVector{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vel == nil {
				m.Vel = &FVector{}
			}
			if err := m.Vel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &FighterInfo{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fighters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fighters = append(m.Fighters, &FighterInfo{})
			if err := m.Fighters[len(m.Fighters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fighters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fighters = append(m.Fighters, &FighterInfo{})
			if err := m.Fighters[len(m.Fighters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			m.Winner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Winner |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kill", wireType)
			}
			m.Kill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kill |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BulletId", wireType)
			}
			m.BulletId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BulletId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseHP", wireType)
			}
			m.LoseHP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoseHP |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddHP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddHP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddHP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			m.Add = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Add |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyId", wireType)
			}
			m.EnemyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnemyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &FVector{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vel == nil {
				m.Vel = &FVector{}
			}
			if err := m.Vel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etype", wireType)
			}
			m.Etype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etype", wireType)
			}
			m.Etype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGamemsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGamemsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGamemsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGamemsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGamemsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGamemsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gamemsg.proto", fileDescriptorGamemsg) }

var fileDescriptorGamemsg = []byte{
	// 924 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xfe, 0x4b, 0xec, 0xe7, 0xa6, 0x59, 0x86, 0xa8, 0xac, 0x22, 0xb4, 0x0a, 0xa3, 0x82,
	0x42, 0x85, 0xa2, 0xd6, 0x70, 0xa8, 0xb8, 0x25, 0x0b, 0x69, 0x2c, 0xd4, 0x36, 0x5a, 0x37, 0xe5,
	0x86, 0x99, 0x64, 0x5f, 0xec, 0x55, 0xf6, 0x8f, 0xd9, 0x99, 0x38, 0xf5, 0x01, 0x89, 0x2f, 0x80,
	0xc4, 0xc7, 0xe0, 0xa3, 0x70, 0xec, 0x91, 0x23, 0x31, 0x17, 0x8e, 0xfd, 0x08, 0x68, 0x66, 0x67,
	0x37, 0x6b, 0x37, 0xe4, 0x40, 0xda, 0xdb, 0xfb, 0xcd, 0xbc, 0x79, 0xbf, 0xdf, 0x9b, 0xfd, 0xcd,
	0xcc, 0xc2, 0xda, 0x88, 0xa5, 0x98, 0xf2, 0xd1, 0xce, 0xa4, 0xc8, 0x45, 0x4e, 0x3a, 0x12, 0xaa,
	0x90, 0xee, 0x03, 0x09, 0x7a, 0x83, 0xe1, 0x61, 0x11, 0x4f, 0x99, 0xc0, 0x60, 0xcc, 0xc4, 0x53,
	0x3e, 0x22, 0x3e, 0x80, 0x60, 0xc5, 0x08, 0xc5, 0x33, 0x96, 0xa2, 0x67, 0x6c, 0x19, 0xdb, 0x9d,
	0xb0, 0x31, 0x42, 0x5c, 0xb0, 0x52, 0x3e, 0xf2, 0x4c, 0x35, 0x21, 0x43, 0xfa, 0x03, 0x90, 0x41,
	0x2f, 0xb8, 0x75, 0x1d, 0x72, 0x0f, 0x56, 0x0a, 0xe4, 0xe7, 0x89, 0xf0, 0xac, 0x2d, 0x63, 0xdb,
	0x09, 0x35, 0xa2, 0x4f, 0xe0, 0xa3, 0x46, 0xfd, 0xe7, 0x62, 0x8c, 0x45, 0x45, 0xb2, 0x09, 0x6d,
	0x8e, 0x59, 0xd4, 0xa0, 0xa8, 0xf1, 0x35, 0x42, 0x3f, 0x03, 0x57, 0x36, 0xfc, 0x7d, 0x5e, 0x24,
	0x51, 0x55, 0x81, 0x80, 0x1d, 0x31, 0xc1, 0xf4, 0x6a, 0x15, 0xd3, 0xaf, 0xc1, 0x95, 0x84, 0xcb,
	0x79, 0xd9, 0x15, 0x8b, 0x8a, 0xeb, 0xb5, 0x66, 0x63, 0xed, 0x3e, 0xb8, 0x83, 0x61, 0x88, 0xd3,
	0x98, 0xe3, 0x11, 0xc7, 0xa2, 0x9f, 0x9d, 0xe6, 0x52, 0x65, 0x16, 0x9f, 0x9c, 0x35, 0xd6, 0xd7,
	0x58, 0x36, 0x3d, 0x46, 0x16, 0xf5, 0x23, 0x55, 0xc5, 0x09, 0x35, 0xa2, 0x8f, 0x01, 0x82, 0x61,
	0x88, 0x7c, 0x92, 0x67, 0x1c, 0x89, 0x07, 0xab, 0x58, 0x14, 0x41, 0x1e, 0x95, 0x05, 0x9c, 0xb0,
	0x82, 0xd7, 0x74, 0xf9, 0x08, 0xba, 0xc1, 0xf0, 0x68, 0xc2, 0x04, 0xee, 0x0a, 0x51, 0xc8, 0x84,
	0x33, 0x9c, 0x69, 0x5e, 0x19, 0xca, 0x91, 0x29, 0x4b, 0xd4, 0x12, 0x2b, 0x94, 0x21, 0xfd, 0x0e,
	0xd6, 0xa5, 0xe8, 0x9f, 0xce, 0x91, 0x8b, 0x3d, 0x26, 0x44, 0xa2, 0x18, 0xb9, 0x60, 0x23, 0xec,
	0x47, 0x15, 0xa3, 0x86, 0xf2, 0xc3, 0x1e, 0xab, 0x9c, 0x17, 0xb3, 0x09, 0x6a, 0xd5, 0x8d, 0x11,
	0x8a, 0xb0, 0x1e, 0xbc, 0xab, 0x62, 0xcd, 0xc6, 0xad, 0x85, 0xc6, 0x29, 0x83, 0xb5, 0x60, 0x38,
	0x10, 0xac, 0xb8, 0x3d, 0x89, 0x34, 0x5e, 0x9e, 0xa7, 0xfd, 0x48, 0x71, 0x74, 0x42, 0x8d, 0x68,
	0x0e, 0x9d, 0x60, 0xb8, 0xc7, 0x12, 0x96, 0x9d, 0xdc, 0xa6, 0xfc, 0x36, 0xac, 0xb0, 0x0b, 0x56,
	0x44, 0xdc, 0xb3, 0xb6, 0xac, 0xed, 0x6e, 0xcf, 0xdd, 0xa9, 0xcf, 0xe0, 0xce, 0xae, 0x9c, 0x08,
	0xf5, 0x3c, 0x7d, 0x04, 0x8e, 0x1a, 0x20, 0x1b, 0xe0, 0x30, 0x55, 0xad, 0xa4, 0x2a, 0x81, 0xf4,
	0x1b, 0x7b, 0xa9, 0xbf, 0x9c, 0x13, 0xaa, 0x98, 0x7e, 0x0a, 0xab, 0xfb, 0x2f, 0xf1, 0x44, 0xe4,
	0x05, 0xb9, 0x03, 0xc6, 0x2b, 0xb5, 0xc0, 0x0c, 0x8d, 0x57, 0x12, 0xcd, 0x54, 0xa6, 0x19, 0x1a,
	0x33, 0xfa, 0x31, 0xd8, 0x4f, 0xf3, 0x29, 0xaa, 0xc2, 0xd9, 0x28, 0x41, 0x9d, 0x57, 0x02, 0x9a,
	0x81, 0x3d, 0x18, 0xe7, 0x82, 0xdc, 0x05, 0x33, 0xae, 0xda, 0x33, 0xe3, 0x48, 0x1a, 0xf7, 0xf8,
	0x3c, 0x49, 0x50, 0xd4, 0xf6, 0xac, 0x31, 0xb9, 0x0f, 0xd6, 0x24, 0xe7, 0x6a, 0xc7, 0xba, 0x3d,
	0xd2, 0x68, 0x49, 0xcb, 0x09, 0xe5, 0xb4, 0xe6, 0xc3, 0xc4, 0xb3, 0x6b, 0x3e, 0x4c, 0xe8, 0x27,
	0xb0, 0x7a, 0xc4, 0xb1, 0x2f, 0x30, 0x95, 0x7b, 0x1f, 0x0b, 0x4c, 0xeb, 0x5d, 0xd5, 0x88, 0xa6,
	0xb0, 0xbe, 0x1f, 0x8f, 0xc6, 0x02, 0x8b, 0x41, 0xc6, 0x26, 0xea, 0x18, 0x2d, 0xab, 0xd3, 0x0a,
	0xcc, 0x9b, 0x15, 0xdc, 0x07, 0x6b, 0x8a, 0xc9, 0x4d, 0x3a, 0xa7, 0x98, 0xd0, 0xc7, 0x60, 0x4b,
	0x1e, 0xf2, 0x10, 0x9c, 0x38, 0x3b, 0xcd, 0xb9, 0x67, 0xa8, 0x4f, 0xb5, 0xd9, 0xcc, 0x5f, 0x94,
	0x13, 0x96, 0x89, 0xf4, 0x57, 0x03, 0xba, 0x7a, 0xea, 0x7d, 0xab, 0xac, 0x2f, 0x21, 0xbb, 0x71,
	0x09, 0xdd, 0x05, 0x73, 0x3c, 0xf1, 0x9c, 0x92, 0x6f, 0x3c, 0xa1, 0x29, 0x74, 0xcb, 0x03, 0xa1,
	0xce, 0x06, 0x79, 0x00, 0x36, 0xc7, 0xe4, 0x54, 0x09, 0xea, 0xf6, 0xee, 0xbd, 0xdd, 0x8f, 0xea,
	0x45, 0xe5, 0x90, 0x1e, 0xb4, 0x4f, 0xcb, 0x41, 0xa9, 0xd7, 0xba, 0x21, 0xbf, 0xce, 0xa3, 0x2f,
	0xa0, 0xfd, 0x0c, 0x2f, 0x06, 0xf2, 0x28, 0xc8, 0x8f, 0xad, 0xce, 0x44, 0xe5, 0x5a, 0x05, 0xfe,
	0x57, 0xd5, 0x1f, 0xa1, 0xfd, 0x84, 0xa5, 0xf8, 0x7c, 0x8a, 0x85, 0x74, 0xc8, 0x45, 0x9c, 0x65,
	0x58, 0x54, 0x0e, 0x29, 0x91, 0xdc, 0x0c, 0x11, 0xa7, 0xd5, 0x81, 0x53, 0xf1, 0x95, 0x02, 0xab,
	0xa9, 0x80, 0x80, 0x7d, 0x16, 0x27, 0xa5, 0x07, 0x9d, 0x50, 0xc5, 0xf4, 0x08, 0xac, 0x83, 0x58,
	0x2c, 0x38, 0xdc, 0x58, 0x72, 0xf8, 0x26, 0xb4, 0xcb, 0xf7, 0xea, 0xca, 0xfd, 0x15, 0x96, 0xa2,
	0x92, 0x9c, 0xe3, 0xc1, 0x61, 0xf5, 0x56, 0x95, 0x88, 0x7e, 0x0e, 0xce, 0x6e, 0x14, 0x1d, 0x1c,
	0xca, 0x4b, 0x96, 0x45, 0x55, 0x4d, 0x19, 0x6a, 0x63, 0x98, 0x95, 0x31, 0xe8, 0x43, 0xb0, 0xbf,
	0x41, 0x16, 0xbd, 0x65, 0x18, 0x79, 0xe5, 0x65, 0x98, 0xce, 0x6a, 0xd6, 0x0a, 0xd2, 0x9f, 0xa1,
	0xb3, 0x1b, 0x45, 0xdf, 0x66, 0x22, 0x16, 0xb3, 0xf7, 0xea, 0xb3, 0x0d, 0x70, 0x50, 0xc8, 0xeb,
	0xa7, 0xdc, 0xb1, 0x12, 0xd0, 0xaf, 0xe0, 0x4e, 0x88, 0x69, 0x3e, 0xc5, 0xff, 0x50, 0x50, 0xaf,
	0x32, 0x1b, 0xab, 0x1e, 0x5c, 0x40, 0x57, 0xbf, 0xa1, 0xea, 0x0e, 0xfb, 0x10, 0xd6, 0x97, 0x7e,
	0x3a, 0xdc, 0x96, 0x1c, 0x5c, 0xfa, 0x83, 0x70, 0x0d, 0xe2, 0xc1, 0xc6, 0x75, 0xcf, 0xbe, 0x6b,
	0x92, 0x0f, 0x60, 0x6d, 0xe1, 0x1d, 0x77, 0x2d, 0x39, 0xb4, 0xf0, 0x64, 0xbb, 0xf6, 0xde, 0x17,
	0xaf, 0x2f, 0xfd, 0xd6, 0x9f, 0x97, 0x7e, 0xeb, 0xcd, 0xa5, 0x6f, 0xfc, 0x32, 0xf7, 0x8d, 0xdf,
	0xe7, 0xbe, 0xf1, 0xc7, 0xdc, 0x37, 0x5e, 0xcf, 0x7d, 0xe3, 0xaf, 0xb9, 0x6f, 0xfc, 0x33, 0xf7,
	0x5b, 0x6f, 0xe6, 0xbe, 0xf1, 0xdb, 0xdf, 0x7e, 0xeb, 0x78, 0x45, 0x6d, 0xc3, 0x97, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x59, 0x7f, 0x9b, 0x65, 0x2f, 0x09, 0x00, 0x00,
}
