// Code generated by protoc-gen-gogo.
// source: login.proto
// DO NOT EDIT!

package gameproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PlatformUser_PlatformType int32

const (
	Engine PlatformUser_PlatformType = 0
	DEVICE PlatformUser_PlatformType = 99
)

var PlatformUser_PlatformType_name = map[int32]string{
	0:  "Engine",
	99: "DEVICE",
}
var PlatformUser_PlatformType_value = map[string]int32{
	"Engine": 0,
	"DEVICE": 99,
}

func (PlatformUser_PlatformType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorLogin, []int{1, 0}
}

// http登录结果
type UserLoginResult struct {
	Uid      uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GateAddr string `protobuf:"bytes,2,opt,name=gateAddr,proto3" json:"gateAddr,omitempty"`
	Key      string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Result   int32  `protobuf:"varint,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UserLoginResult) Reset()                    { *m = UserLoginResult{} }
func (*UserLoginResult) ProtoMessage()               {}
func (*UserLoginResult) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{0} }

func (m *UserLoginResult) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserLoginResult) GetGateAddr() string {
	if m != nil {
		return m.GateAddr
	}
	return ""
}

func (m *UserLoginResult) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UserLoginResult) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type PlatformUser struct {
	PlatformId      string                    `protobuf:"bytes,1,opt,name=platformId,proto3" json:"platformId,omitempty"`
	Platform        PlatformUser_PlatformType `protobuf:"varint,2,opt,name=platform,proto3,enum=gameproto.PlatformUser_PlatformType" json:"platform,omitempty"`
	PlatformSession string                    `protobuf:"bytes,3,opt,name=platformSession,proto3" json:"platformSession,omitempty"`
	PlatformUid     int32                     `protobuf:"varint,4,opt,name=platformUid,proto3" json:"platformUid,omitempty"`
	ServerID        int32                     `protobuf:"varint,5,opt,name=serverID,proto3" json:"serverID,omitempty"`
	ChannelId       string                    `protobuf:"bytes,6,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Version         int32                     `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	Key             string                    `protobuf:"bytes,8,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *PlatformUser) Reset()                    { *m = PlatformUser{} }
func (*PlatformUser) ProtoMessage()               {}
func (*PlatformUser) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{1} }

func (m *PlatformUser) GetPlatformId() string {
	if m != nil {
		return m.PlatformId
	}
	return ""
}

func (m *PlatformUser) GetPlatform() PlatformUser_PlatformType {
	if m != nil {
		return m.Platform
	}
	return Engine
}

func (m *PlatformUser) GetPlatformSession() string {
	if m != nil {
		return m.PlatformSession
	}
	return ""
}

func (m *PlatformUser) GetPlatformUid() int32 {
	if m != nil {
		return m.PlatformUid
	}
	return 0
}

func (m *PlatformUser) GetServerID() int32 {
	if m != nil {
		return m.ServerID
	}
	return 0
}

func (m *PlatformUser) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *PlatformUser) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PlatformUser) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type LoginReturn struct {
	ErrCode    int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ServerTime int32  `protobuf:"varint,2,opt,name=serverTime,proto3" json:"serverTime,omitempty"`
	Args       string `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
	BFirst     int32  `protobuf:"varint,4,opt,name=bFirst,proto3" json:"bFirst,omitempty"`
}

func (m *LoginReturn) Reset()                    { *m = LoginReturn{} }
func (*LoginReturn) ProtoMessage()               {}
func (*LoginReturn) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{2} }

func (m *LoginReturn) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *LoginReturn) GetServerTime() int32 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *LoginReturn) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *LoginReturn) GetBFirst() int32 {
	if m != nil {
		return m.BFirst
	}
	return 0
}

func init() {
	proto.RegisterType((*UserLoginResult)(nil), "gameproto.UserLoginResult")
	proto.RegisterType((*PlatformUser)(nil), "gameproto.PlatformUser")
	proto.RegisterType((*LoginReturn)(nil), "gameproto.LoginReturn")
	proto.RegisterEnum("gameproto.PlatformUser_PlatformType", PlatformUser_PlatformType_name, PlatformUser_PlatformType_value)
}
func (x PlatformUser_PlatformType) String() string {
	s, ok := PlatformUser_PlatformType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UserLoginResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UserLoginResult)
	if !ok {
		that2, ok := that.(UserLoginResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.GateAddr != that1.GateAddr {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *PlatformUser) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PlatformUser)
	if !ok {
		that2, ok := that.(PlatformUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PlatformId != that1.PlatformId {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.PlatformSession != that1.PlatformSession {
		return false
	}
	if this.PlatformUid != that1.PlatformUid {
		return false
	}
	if this.ServerID != that1.ServerID {
		return false
	}
	if this.ChannelId != that1.ChannelId {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *LoginReturn) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LoginReturn)
	if !ok {
		that2, ok := that.(LoginReturn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.Args != that1.Args {
		return false
	}
	if this.BFirst != that1.BFirst {
		return false
	}
	return true
}
func (this *UserLoginResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gameproto.UserLoginResult{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "GateAddr: "+fmt.Sprintf("%#v", this.GateAddr)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlatformUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&gameproto.PlatformUser{")
	s = append(s, "PlatformId: "+fmt.Sprintf("%#v", this.PlatformId)+",\n")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "PlatformSession: "+fmt.Sprintf("%#v", this.PlatformSession)+",\n")
	s = append(s, "PlatformUid: "+fmt.Sprintf("%#v", this.PlatformUid)+",\n")
	s = append(s, "ServerID: "+fmt.Sprintf("%#v", this.ServerID)+",\n")
	s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginReturn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gameproto.LoginReturn{")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "ServerTime: "+fmt.Sprintf("%#v", this.ServerTime)+",\n")
	s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	s = append(s, "BFirst: "+fmt.Sprintf("%#v", this.BFirst)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLogin(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UserLoginResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoginResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.Uid))
	}
	if len(m.GateAddr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.GateAddr)))
		i += copy(dAtA[i:], m.GateAddr)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Result != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *PlatformUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlatformUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlatformId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.PlatformId)))
		i += copy(dAtA[i:], m.PlatformId)
	}
	if m.Platform != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.Platform))
	}
	if len(m.PlatformSession) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.PlatformSession)))
		i += copy(dAtA[i:], m.PlatformSession)
	}
	if m.PlatformUid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.PlatformUid))
	}
	if m.ServerID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.ServerID))
	}
	if len(m.ChannelId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.ChannelId)))
		i += copy(dAtA[i:], m.ChannelId)
	}
	if m.Version != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.Version))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *LoginReturn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReturn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.ErrCode))
	}
	if m.ServerTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.ServerTime))
	}
	if len(m.Args) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Args)))
		i += copy(dAtA[i:], m.Args)
	}
	if m.BFirst != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.BFirst))
	}
	return i, nil
}

func encodeFixed64Login(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Login(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLogin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserLoginResult) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovLogin(uint64(m.Uid))
	}
	l = len(m.GateAddr)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovLogin(uint64(m.Result))
	}
	return n
}

func (m *PlatformUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlatformId)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.Platform != 0 {
		n += 1 + sovLogin(uint64(m.Platform))
	}
	l = len(m.PlatformSession)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.PlatformUid != 0 {
		n += 1 + sovLogin(uint64(m.PlatformUid))
	}
	if m.ServerID != 0 {
		n += 1 + sovLogin(uint64(m.ServerID))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovLogin(uint64(m.Version))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func (m *LoginReturn) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovLogin(uint64(m.ErrCode))
	}
	if m.ServerTime != 0 {
		n += 1 + sovLogin(uint64(m.ServerTime))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.BFirst != 0 {
		n += 1 + sovLogin(uint64(m.BFirst))
	}
	return n
}

func sovLogin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLogin(x uint64) (n int) {
	return sovLogin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserLoginResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserLoginResult{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`GateAddr:` + fmt.Sprintf("%v", this.GateAddr) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlatformUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlatformUser{`,
		`PlatformId:` + fmt.Sprintf("%v", this.PlatformId) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`PlatformSession:` + fmt.Sprintf("%v", this.PlatformSession) + `,`,
		`PlatformUid:` + fmt.Sprintf("%v", this.PlatformUid) + `,`,
		`ServerID:` + fmt.Sprintf("%v", this.ServerID) + `,`,
		`ChannelId:` + fmt.Sprintf("%v", this.ChannelId) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginReturn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginReturn{`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`ServerTime:` + fmt.Sprintf("%v", this.ServerTime) + `,`,
		`Args:` + fmt.Sprintf("%v", this.Args) + `,`,
		`BFirst:` + fmt.Sprintf("%v", this.BFirst) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLogin(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserLoginResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLoginResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLoginResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlatformUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlatformUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlatformUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= (PlatformUser_PlatformType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformSession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformSession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformUid", wireType)
			}
			m.PlatformUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatformUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginReturn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReturn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReturn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BFirst", wireType)
			}
			m.BFirst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BFirst |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLogin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLogin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLogin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLogin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("login.proto", fileDescriptorLogin) }

var fileDescriptorLogin = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x6e, 0xda, 0x30,
	0x1c, 0xc6, 0x63, 0x20, 0x81, 0xfc, 0xd9, 0x06, 0xf2, 0x61, 0x8a, 0xa6, 0xc9, 0x8a, 0xa2, 0x69,
	0xca, 0x61, 0xe2, 0xb0, 0xbd, 0xc0, 0x36, 0x60, 0x52, 0xa4, 0x1d, 0x26, 0x0f, 0x7a, 0x0f, 0xc4,
	0x4d, 0xad, 0x86, 0x04, 0xd9, 0x01, 0x89, 0x5b, 0x1f, 0xa1, 0x8f, 0xd1, 0x47, 0xa9, 0x7a, 0xe2,
	0xd8, 0x63, 0x49, 0x2f, 0x3d, 0xf2, 0x08, 0x95, 0x4d, 0x12, 0xa2, 0xde, 0xbe, 0xdf, 0xe7, 0xd8,
	0xdf, 0x3f, 0xdf, 0x1f, 0xfa, 0x49, 0x16, 0xf3, 0x74, 0xb4, 0x16, 0x59, 0x9e, 0x61, 0x3b, 0x0e,
	0x57, 0x4c, 0x4b, 0x8f, 0xc3, 0x60, 0x2e, 0x99, 0xf8, 0xab, 0x4e, 0x29, 0x93, 0x9b, 0x24, 0xc7,
	0x43, 0x68, 0x6f, 0x78, 0xe4, 0x20, 0x17, 0xf9, 0xef, 0xa9, 0x92, 0xf8, 0x13, 0xf4, 0xe2, 0x30,
	0x67, 0xbf, 0xa2, 0x48, 0x38, 0x2d, 0x17, 0xf9, 0x36, 0xad, 0x59, 0x7d, 0x7d, 0xcd, 0x76, 0x4e,
	0x5b, 0xdb, 0x4a, 0xe2, 0x8f, 0x60, 0x09, 0xfd, 0x92, 0xd3, 0x71, 0x91, 0x6f, 0xd2, 0x92, 0xbc,
	0x87, 0x16, 0xbc, 0xfb, 0x97, 0x84, 0xf9, 0x65, 0x26, 0x56, 0x2a, 0x13, 0x13, 0x80, 0x75, 0xc9,
	0xc1, 0x29, 0xcf, 0xa6, 0x0d, 0x07, 0xff, 0x84, 0x5e, 0x45, 0x3a, 0xf6, 0xc3, 0xf7, 0x2f, 0xa3,
	0x7a, 0xf2, 0x51, 0xf3, 0xa9, 0x1a, 0x66, 0xbb, 0x35, 0xa3, 0xf5, 0x2d, 0xec, 0xc3, 0xa0, 0xd2,
	0xff, 0x99, 0x94, 0x3c, 0x4b, 0xcb, 0x41, 0xdf, 0xda, 0xd8, 0x85, 0x7e, 0x65, 0xcd, 0x79, 0x54,
	0x4e, 0xde, 0xb4, 0x54, 0x09, 0x92, 0x89, 0x2d, 0x13, 0xc1, 0xc4, 0x31, 0xf5, 0x71, 0xcd, 0xf8,
	0x33, 0xd8, 0xcb, 0xab, 0x30, 0x4d, 0x59, 0x12, 0x44, 0x8e, 0xa5, 0x13, 0xce, 0x06, 0x76, 0xa0,
	0xbb, 0x65, 0x42, 0xa7, 0x77, 0xf5, 0xc5, 0x0a, 0xab, 0xf2, 0x7a, 0x75, 0x79, 0xde, 0xd7, 0x73,
	0x47, 0xea, 0x5f, 0x30, 0x80, 0x35, 0x4d, 0x63, 0x9e, 0xb2, 0xa1, 0xa1, 0xf4, 0x64, 0x7a, 0x11,
	0x8c, 0xa7, 0xc3, 0xa5, 0x27, 0xa1, 0x5f, 0xee, 0x2c, 0xdf, 0x88, 0x54, 0x45, 0x30, 0x21, 0xc6,
	0x59, 0xc4, 0x74, 0x8f, 0x26, 0xad, 0x50, 0x95, 0x7c, 0x1a, 0x73, 0xc6, 0x57, 0x4c, 0xd7, 0x68,
	0xd2, 0x86, 0x83, 0x31, 0x74, 0x42, 0x11, 0xcb, 0xb2, 0x17, 0xad, 0xd5, 0x06, 0x17, 0x7f, 0xb8,
	0x90, 0xf5, 0x06, 0x4f, 0xf4, 0xfb, 0xdb, 0xfe, 0x40, 0x8c, 0xc7, 0x03, 0x31, 0x8e, 0x07, 0x82,
	0x6e, 0x0a, 0x82, 0xee, 0x0a, 0x82, 0xee, 0x0b, 0x82, 0xf6, 0x05, 0x41, 0x4f, 0x05, 0x41, 0x2f,
	0x05, 0x31, 0x8e, 0x05, 0x41, 0xb7, 0xcf, 0xc4, 0x58, 0x58, 0x7a, 0x4f, 0x3f, 0x5e, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x6d, 0x71, 0x26, 0x5c, 0x7b, 0x02, 0x00, 0x00,
}
